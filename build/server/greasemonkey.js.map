{"version":3,"sources":["../../server/greasemonkey.js"],"names":["fs","require","path","express","wget","router","Router","getMeta","cb","download","join","__dirname","on","metaData","JSON","parse","readFileSync","createWorkingDirectories","serverContentDir","greasemonkeyDir","existsSync","mkdirSync","sendGreasemonkeyFile","scriptId","req","res","matchingScripts","filter","m","id","length","fileName","sendFile","headers","status","send","error","e","console","err","get","pathValues","split"],"mappings":";;;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAME,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,eAAD,CAApB;;AAEA,IAAMI,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAf;;AAEA,SAASC,OAAT,CAAiBC,EAAjB,EAAqB;AACnB,MAAMC,QAAQ,GAAGL,IAAI,CAACK,QAAL,CACf,qFADe,EAEfP,IAAI,CAACQ,IAAL,CAAUC,SAAV,EAAqB,+BAArB,EAAsD,cAAtD,CAFe,EAGf,EAHe,CAAjB;AAKAF,EAAAA,QAAQ,CAACG,EAAT,CAAY,KAAZ,EAAmB,YAAM;AACvB,QAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CACff,EAAE,CAACgB,YAAH,CACEd,IAAI,CAACQ,IAAL,CAAUC,SAAV,EAAqB,+BAArB,EAAsD,cAAtD,CADF,EAEE,MAFF,CADe,CAAjB;AAMAH,IAAAA,EAAE,CAACK,QAAD,CAAF;AACD,GARD;AASD;;AAED,SAASI,wBAAT,GAAoC;AAClC,MAAIC,gBAAgB,GAAGhB,IAAI,CAACQ,IAAL,CAAUC,SAAV,EAAqB,kBAArB,CAAvB;AACA,MAAIQ,eAAe,GAAGjB,IAAI,CAACQ,IAAL,CAAUC,SAAV,EAAqB,+BAArB,CAAtB;;AAEA,MAAI,CAACX,EAAE,CAACoB,UAAH,CAAcF,gBAAd,CAAL,EAAsC;AACpClB,IAAAA,EAAE,CAACqB,SAAH,CAAaH,gBAAb;AACD;;AACD,MAAI,CAAClB,EAAE,CAACoB,UAAH,CAAcD,eAAd,CAAL,EAAqC;AACnCnB,IAAAA,EAAE,CAACqB,SAAH,CAAaF,eAAb;AACD;AACF;;AAED,SAASG,oBAAT,CAA8BC,QAA9B,EAAwCC,GAAxC,EAA6CC,GAA7C,EAAkD;AAChD,MAAI;AACFR,IAAAA,wBAAwB;AACxBV,IAAAA,OAAO,CAAC,UAAAM,QAAQ,EAAI;AAClB,UAAMa,eAAe,GAAGb,QAAQ,CAACc,MAAT,CAAgB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,KAASN,QAAb;AAAA,OAAjB,CAAxB;;AACA,UAAIG,eAAe,CAACI,MAAhB,GAAyB,CAA7B,EAAgC;AAAA,YACtBC,QADsB,GACTL,eAAe,CAAC,CAAD,CADN,CACtBK,QADsB;AAE9B,YAAMtB,QAAQ,GAAGL,IAAI,CAACK,QAAL,sFAC+DsB,QAD/D,GAEf7B,IAAI,CAACQ,IAAL,CAAUC,SAAV,EAAqB,+BAArB,EAAsDoB,QAAtD,CAFe,EAGf,EAHe,CAAjB;AAKAtB,QAAAA,QAAQ,CAACG,EAAT,CAAY,KAAZ,EAAmB,YAAM;AACvBa,UAAAA,GAAG,CAACO,QAAJ,CACE9B,IAAI,CAACQ,IAAL,CAAUC,SAAV,EAAqB,+BAArB,EAAsDoB,QAAtD,CADF,EAEE;AACEE,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB;AADX,WAFF;AAMD,SAPD;AAQD,OAfD,MAeO;AACLR,QAAAA,GAAG,CACAS,MADH,CACU,GADV,EAEGC,IAFH,CAEQ;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAFR;AAGD;AACF,KAtBM,CAAP;AAuBD,GAzBD,CAyBE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACF,KAAR,oDAAiEG,GAAjE;AACD;AACF;;AAEDlC,MAAM,CAACmC,GAAP,oBAA8B,UAAChB,GAAD,EAAMC,GAAN,EAAc;AAC1C,MAAMgB,UAAU,GAAGjB,GAAG,CAACtB,IAAJ,CAASwC,KAAT,CAAe,GAAf,CAAnB;AACA,MAAMnB,QAAQ,GAAGkB,UAAU,CAACA,UAAU,CAACX,MAAX,GAAoB,CAArB,CAA3B;AACAR,EAAAA,oBAAoB,CAACC,QAAD,EAAWC,GAAX,EAAgBC,GAAhB,CAApB;AACD,CAJD;AAMApB,MAAM,CAACmC,GAAP,wBAAkC,UAAChB,GAAD,EAAMC,GAAN,EAAc;AAC9C,MAAMgB,UAAU,GAAGjB,GAAG,CAACtB,IAAJ,CAASwC,KAAT,CAAe,GAAf,CAAnB;AACA,MAAMnB,QAAQ,GAAGkB,UAAU,CAACA,UAAU,CAACX,MAAX,GAAoB,CAArB,CAA3B;AACAR,EAAAA,oBAAoB,CAACC,QAAD,EAAWC,GAAX,EAAgBC,GAAhB,CAApB;AACD,CAJD;eAMepB,M","sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\nconst express = require('express');\nconst wget = require('wget-improved');\n\nconst router = express.Router();\n\nfunction getMeta(cb) {\n  const download = wget.download(\n    'https://raw.githubusercontent.com/georgegillams/browser-scripts/master/scripts.json',\n    path.join(__dirname, './server_content/greasemonkey', 'scripts.json'),\n    {},\n  );\n  download.on('end', () => {\n    const metaData = JSON.parse(\n      fs.readFileSync(\n        path.join(__dirname, './server_content/greasemonkey', 'scripts.json'),\n        'utf8',\n      ),\n    );\n    cb(metaData);\n  });\n}\n\nfunction createWorkingDirectories() {\n  var serverContentDir = path.join(__dirname, './server_content');\n  var greasemonkeyDir = path.join(__dirname, './server_content/greasemonkey');\n\n  if (!fs.existsSync(serverContentDir)) {\n    fs.mkdirSync(serverContentDir);\n  }\n  if (!fs.existsSync(greasemonkeyDir)) {\n    fs.mkdirSync(greasemonkeyDir);\n  }\n}\n\nfunction sendGreasemonkeyFile(scriptId, req, res) {\n  try {\n    createWorkingDirectories();\n    getMeta(metaData => {\n      const matchingScripts = metaData.filter(m => m.id === scriptId);\n      if (matchingScripts.length > 0) {\n        const { fileName } = matchingScripts[0];\n        const download = wget.download(\n          `https://raw.githubusercontent.com/georgegillams/browser-scripts/master/src/${fileName}`,\n          path.join(__dirname, './server_content/greasemonkey', fileName),\n          {},\n        );\n        download.on('end', () => {\n          res.sendFile(\n            path.join(__dirname, './server_content/greasemonkey', fileName),\n            {\n              headers: { 'Content-Type': 'text/plain' },\n            },\n          );\n        });\n      } else {\n        res\n          .status(500)\n          .send({ error: 'An error occured fetching resources from GitHub.' });\n      }\n    });\n  } catch (e) {\n    console.error(`An error occured fetching resources from GitHub`, err);\n  }\n}\n\nrouter.get(`/greasemonkey/*`, (req, res) => {\n  const pathValues = req.path.split('/');\n  const scriptId = pathValues[pathValues.length - 1];\n  sendGreasemonkeyFile(scriptId, req, res);\n});\n\nrouter.get(`/api/greasemonkey/*`, (req, res) => {\n  const pathValues = req.path.split('/');\n  const scriptId = pathValues[pathValues.length - 1];\n  sendGreasemonkeyFile(scriptId, req, res);\n});\n\nexport default router;\n"],"file":"greasemonkey.js"}