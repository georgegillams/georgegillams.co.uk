{"version":3,"sources":["../../server/index.js"],"names":["app","server","http","Server","io","SocketIo","path","process","env","NODE_ENV","PROJECT_UNDER_TEST","use","origin","SITE_URL","redirectNonWWW","greasemonkey","secret","resave","saveUninitialized","cookie","maxAge","bodyParser","json","seo","api","outputPath","cwd","publicPath","customHost","argv","host","HOST","prettyHost","listen","port","err","logger","error","message","appStarted"],"mappings":";;;;AAEA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAtBA;AAwBA,IAAMA,GAAG,GAAG,0BAAZ;AACA,IAAMC,MAAM,GAAG,IAAIC,iBAAKC,MAAT,CAAgBH,GAAhB,CAAf;AAEA,IAAMI,EAAE,GAAG,IAAIC,kBAAJ,CAAaJ,MAAb,CAAX;AACAG,EAAE,CAACE,IAAH,CAAQ,KAAR;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAACC,6BAA9C,EAAkE;AAChEV,EAAAA,GAAG,CAACW,GAAJ,CACE,sBAAK;AACHC,IAAAA,MAAM,EAAEC;AADL,GAAL,CADF;AAKD;;AAEDb,GAAG,CAACW,GAAJ,CAAQ,oCAAR;AAEAX,GAAG,CAACW,GAAJ,CAAQG,0BAAR;AACAd,GAAG,CAACW,GAAJ,CAAQI,wBAAR;AACAf,GAAG,CAACW,GAAJ,CACE,gCAAQ;AACNK,EAAAA,MAAM,EAAE,0BADF;AAENC,EAAAA,MAAM,EAAE,KAFF;AAGNC,EAAAA,iBAAiB,EAAE,KAHb;AAINC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,MAAM,EAAE;AAAV;AAJF,CAAR,CADF;AAQApB,GAAG,CAACW,GAAJ,CAAQU,uBAAWC,IAAX,EAAR;AACAtB,GAAG,CAACW,GAAJ,CAAQ,+BAAR;AAEAX,GAAG,CAACW,GAAJ,CAAQY,eAAR,E,CAEA;;AACAvB,GAAG,CAACW,GAAJ,CAAQ,MAAR,EAAgBa,eAAhB,E,CAEA;AACA;AAEA;;AACA,oCAAMxB,GAAN,EAAW;AACTyB,EAAAA,UAAU,EAAE,mBAAQlB,OAAO,CAACmB,GAAR,EAAR,EAAuB,OAAvB,CADH;AAETC,EAAAA,UAAU,EAAE;AAFH,CAAX,E,CAKA;;AACA,IAAMC,UAAU,GAAGC,iBAAKC,IAAL,IAAavB,OAAO,CAACC,GAAR,CAAYuB,IAA5C;AACA,IAAMD,IAAI,GAAGF,UAAU,IAAI,IAA3B,C,CAAiC;;AACjC,IAAMI,UAAU,GAAGJ,UAAU,IAAI,WAAjC,C,CAEA;;AACA5B,GAAG,CAACiC,MAAJ,CAAWC,gBAAX,EAAiBJ,IAAjB,EAAuB,UAAAK,GAAG,EAAI;AAC5B,MAAIA,GAAJ,EAAS;AACP,WAAOC,mBAAOC,KAAP,CAAaF,GAAG,CAACG,OAAjB,CAAP;AACD;;AACDF,qBAAOG,UAAP,CAAkBL,gBAAlB,EAAwBF,UAAxB;AACD,CALD","sourcesContent":["/* eslint consistent-return:0 */\n\nimport http from 'http';\nimport { resolve } from 'path';\n\nimport express from 'express';\nimport session from 'express-session';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\nimport fileupload from 'express-fileupload';\nimport SocketIo from 'socket.io';\nimport cookieParser from 'cookie-parser';\nimport sslRedirect from 'heroku-ssl-redirect';\nimport { SITE_URL, PROJECT_UNDER_TEST } from 'helpers/constants';\n\nimport logger from './util//logger';\nimport seo from './seo';\nimport api from './api/api';\nimport greasemonkey from './greasemonkey';\nimport redirectNonWWW from './redirectNonWWW';\nimport argv from './util/argv';\nimport port from './util//port';\nimport setup from './middlewares/frontendMiddleware';\n\nconst app = express();\nconst server = new http.Server(app);\n\nconst io = new SocketIo(server);\nio.path('/ws');\n\nif (process.env.NODE_ENV === 'production' && !PROJECT_UNDER_TEST) {\n  app.use(\n    cors({\n      origin: SITE_URL,\n    }),\n  );\n}\n\napp.use(fileupload());\n\napp.use(redirectNonWWW);\napp.use(greasemonkey);\napp.use(\n  session({\n    secret: 'react and redux rule!!!!',\n    resave: false,\n    saveUninitialized: false,\n    cookie: { maxAge: 60000 },\n  }),\n);\napp.use(bodyParser.json());\napp.use(cookieParser());\n\napp.use(seo);\n\n// If you need a backend, e.g. an API, add your custom backend-specific middleware here\napp.use('/api', api);\n\n// Add static projects (eg pecha kucha etc)\n// app.use('/', express.static(__dirname + '/../public')); // ← adjust\n\n// In production we need to pass these values in instead of relying on webpack\nsetup(app, {\n  outputPath: resolve(process.cwd(), 'build'),\n  publicPath: '/',\n});\n\n// get the intended host and port number, use localhost and port 3000 if not provided\nconst customHost = argv.host || process.env.HOST;\nconst host = customHost || null; // Let http.Server use its default IPv6/4 host\nconst prettyHost = customHost || 'localhost';\n\n// Start your app.\napp.listen(port, host, err => {\n  if (err) {\n    return logger.error(err.message);\n  }\n  logger.appStarted(port, prettyHost);\n});\n"],"file":"index.js"}