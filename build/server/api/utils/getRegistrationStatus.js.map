{"version":3,"sources":["../../../../server/api/utils/getRegistrationStatus.js"],"names":["getRegistrationStatus","user","Promise","resolve","reject","redisKey","filter","u","id","then","loadedUser","resolveIfNotFound","authorId","loadedUserDetails","reservedTo","loadedTicket","userId","loadedPayments","loadedRegistration","ticket","overall","userDetails","photoRelease","validTicket","hasArrivedAtConferenceDay1","hasArrivedAtConferenceDay2","name","surname","university","yearOfStudy","photoReleaseConsented","email","ticketId","err","error","errorMessage"],"mappings":"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","sourcesContent":["import { datumLoad, datumLoadSingle, datumCreate } from '../actions/datum';\n\nimport { find } from 'utils/find';\nimport { INVALID_SESSION, INVALID_CREDENTIALS } from 'helpers/constants';\nimport {\n  calculateOutstandingBalance,\n  ticketReservationIsValid,\n} from 'helpers/ticketing';\nimport { generateKey } from 'utils/hash';\nimport setContentLastUpdatedTimestamp from 'utils/setContentLastUpdatedTimestamp';\n\nexport default function getRegistrationStatus(user) {\n  return new Promise((resolve, reject) => {\n    datumLoadSingle({\n      redisKey: 'users',\n      filter: u => u.id === user.id,\n    }).then(\n      loadedUser => {\n        datumLoadSingle({\n          redisKey: 'userDetails',\n          resolveIfNotFound: true,\n          filter: u => u.authorId === user.id,\n        }).then(loadedUserDetails => {\n          datumLoadSingle({\n            redisKey: 'tickets',\n            resolveIfNotFound: true,\n            filter: u => u.reservedTo === user.id,\n          }).then(loadedTicket => {\n            datumLoad({\n              redisKey: 'stripepayments',\n              filter: u => u.userId === user.id,\n            }).then(loadedPayments => {\n              datumLoadSingle({\n                redisKey: 'registrations',\n                resolveIfNotFound: true,\n                filter: u => u.userId === user.id,\n              }).then(loadedRegistration => {\n                let ticket;\n                let overall = 'INCOMPLETE';\n                let userDetails = 'NOT STARTED';\n                let photoRelease = 'NOT STARTED';\n                let validTicket = 'NOT STARTED';\n                let hasArrivedAtConferenceDay1 = false;\n                let hasArrivedAtConferenceDay2 = false;\n                if (loadedRegistration) {\n                  hasArrivedAtConferenceDay1 =\n                    loadedRegistration.hasArrivedAtConferenceDay1;\n                  hasArrivedAtConferenceDay2 =\n                    loadedRegistration.hasArrivedAtConferenceDay2;\n                }\n\n                if (loadedUserDetails) {\n                  userDetails = 'INCOMPLETE';\n                  if (\n                    loadedUserDetails.name &&\n                    loadedUserDetails.surname &&\n                    loadedUserDetails.university &&\n                    loadedUserDetails.yearOfStudy\n                  ) {\n                    userDetails = 'COMPLETE';\n                  }\n                  if (loadedUserDetails.photoReleaseConsented) {\n                    photoRelease = 'COMPLETE';\n                  }\n                }\n\n                if (loadedTicket && ticketReservationIsValid(loadedTicket)) {\n                  validTicket = 'INCOMPLETE';\n                  if (\n                    calculateOutstandingBalance(loadedTicket, loadedPayments) <\n                    1\n                  ) {\n                    validTicket = 'COMPLETE';\n                  }\n                }\n\n                if (\n                  userDetails === 'NOT STARTED' &&\n                  photoRelease === ' NOT STARTED' &&\n                  validTicket === ' NOT STARTED'\n                ) {\n                  overall = 'NOT STARTED';\n                }\n\n                if (userDetails === 'COMPLETE' && validTicket === 'COMPLETE') {\n                  overall = 'COMPLETE';\n                  ticket = {\n                    email: loadedUser.email,\n                    ticketId: loadedTicket.id,\n                  };\n                }\n\n                resolve({\n                  userId: user.id,\n                  overall,\n                  userDetails,\n                  photoRelease,\n                  validTicket,\n                  ticket,\n                  hasArrivedAtConferenceDay1,\n                  hasArrivedAtConferenceDay2,\n                });\n              });\n            });\n          });\n        });\n      },\n      err => {\n        reject({ error: 'not-found', errorMessage: `No user found with id ${user.id}` });\n      },\n    );\n  });\n}\n"],"file":"getRegistrationStatus.js"}