{"version":3,"sources":["../../../../server/api/utils/authentication.js"],"names":["secretApiKey","process","env","SECRET_API_KEY","authentication","req","Promise","resolve","sessionKey","cookies","session","apiKey","headers","apikey","id","admin","uname","redisKey","then","userData","sessionData","userSession","existingValue","userId","userProfile"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,cAAjC;;AAEe,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC1C,SAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5B,QAAMC,UAAU,GAAGH,GAAG,CAACI,OAAJ,CAAYC,OAA/B;AACA,QAAMC,MAAM,GAAGN,GAAG,CAACO,OAAJ,CAAYC,MAA3B,CAF4B,CAG5B;AACA;;AACA,QAAIF,MAAM,IAAI,6BAAYA,MAAZ,EAAoBX,YAApB,CAAd,EAAiD;AAC/CO,MAAAA,OAAO,CAAC;AACNO,QAAAA,EAAE,EAAE,sBADE;AAENC,QAAAA,KAAK,EAAE,IAFD;AAGNC,QAAAA,KAAK,EAAE;AAHD,OAAD,CAAP;AAKD,KAND,MAMO,IAAIR,UAAJ,EAAgB;AACrB,4BAAU;AAAES,QAAAA,QAAQ,EAAE;AAAZ,OAAV,EAAiCC,IAAjC,CAAsC,UAAAC,QAAQ,EAAI;AAChD,8BAAU;AAAEF,UAAAA,QAAQ,EAAE;AAAZ,SAAV,EAAoCC,IAApC,CAAyC,UAAAE,WAAW,EAAI;AACtD;AADsD,sBAEf,iBACrCA,WADqC,EAErCZ,UAFqC,EAGrC,YAHqC,CAFe;AAAA,cAE/Ba,WAF+B,SAE9CC,aAF8C;;AAOtD,cAAID,WAAJ,EAAiB;AAAA,yBACwB,iBACrCF,QADqC,EAErCE,WAAW,CAACE,MAFyB,CADxB;AAAA,gBACQC,WADR,UACPF,aADO;;AAKf,gBAAIE,WAAJ,EAAiB;AACfjB,cAAAA,OAAO,CAACiB,WAAD,CAAP;AACD,aAFD,MAEO;AACLjB,cAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,WAVD,MAUO;AACLA,YAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,SApBD;AAqBD,OAtBD;AAuBD,KAxBM,MAwBA;AACLA,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GAtCM,CAAP;AAuCD","sourcesContent":["import safeCompare from 'safe-compare';\nimport { datumLoad } from '../actions/datum';\n\nimport { find } from './find';\n\nconst secretApiKey = process.env.SECRET_API_KEY;\n\nexport default function authentication(req) {\n  return new Promise(resolve => {\n    const sessionKey = req.cookies.session;\n    const apiKey = req.headers.apikey;\n    // important to use `safeCompare` here to prevent\n    // a timing attack to discover the key\n    if (apiKey && safeCompare(apiKey, secretApiKey)) {\n      resolve({\n        id: 'direct_API_invocator',\n        admin: true,\n        uname: 'direct_API_invocation',\n      });\n    } else if (sessionKey) {\n      datumLoad({ redisKey: 'users' }).then(userData => {\n        datumLoad({ redisKey: 'sessions' }).then(sessionData => {\n          // `find` uses `safeCompare` so it is safe to use for authentication\n          const { existingValue: userSession } = find(\n            sessionData,\n            sessionKey,\n            'sessionKey',\n          );\n          if (userSession) {\n            const { existingValue: userProfile } = find(\n              userData,\n              userSession.userId,\n            );\n            if (userProfile) {\n              resolve(userProfile);\n            } else {\n              resolve(null);\n            }\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    } else {\n      resolve(null);\n    }\n  });\n}\n"],"file":"authentication.js"}