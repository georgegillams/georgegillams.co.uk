{"version":3,"sources":["../../../../../server/api/actions/userDetails/load.js"],"names":["load","req","reqSecured","userDetailsAllowedAttributes","Promise","resolve","reject","then","user","redisKey","includeDeleted","admin","filter","ud","authorId","id","loadedUserDetails","ticketData","ticket","existingValue","err","UNAUTHORISED_READ"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AAEe,SAASA,IAAT,CAAcC,GAAd,EAAmB;AAChC,MAAMC,UAAU,GAAG,2BAAUD,GAAV,EAAeE,wCAAf,CAAnB;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,oCAAeJ,UAAf,EAA2BK,IAA3B,CACE,UAAAC,IAAI,EAAI;AACN,UAAIA,IAAJ,EAAU;AACR,oCAAgB;AACdC,UAAAA,QAAQ,EAAE,aADI;AAEdC,UAAAA,cAAc,EAAEF,IAAI,CAACG,KAFP;AAGdC,UAAAA,MAAM,EAAE,gBAAAC,EAAE;AAAA,mBAAIA,EAAE,CAACC,QAAH,KAAgBN,IAAI,CAACO,EAAzB;AAAA;AAHI,SAAhB,EAIGR,IAJH,CAKE,UAAAS,iBAAiB,EAAI;AACnB,gCAAU;AACRP,YAAAA,QAAQ,EAAE;AADF,WAAV,EAEGF,IAFH,CAEQ,UAAAU,UAAU,EAAI;AAAA,wBACc,iBAChCA,UADgC,EAEhCT,IAAI,CAACO,EAF2B,EAGhC,YAHgC,CADd;AAAA,gBACGG,MADH,SACZC,aADY;;AAMpBH,YAAAA,iBAAiB,CAACE,MAAlB,GAA2BA,MAA3B;AACAb,YAAAA,OAAO,CAACW,iBAAD,CAAP;AACD,WAVD;AAWD,SAjBH,EAkBE,UAAAI,GAAG,EAAI;AACLf,UAAAA,OAAO,CACL,wBAAY;AAAEI,YAAAA,QAAQ,EAAE,aAAZ;AAA2BD,YAAAA,IAAI,EAAJA;AAA3B,WAAZ,EAA+CN,UAA/C,CADK,CAAP;AAGD,SAtBH;AAwBD,OAzBD,MAyBO;AACLG,QAAAA,OAAO,CAACgB,4BAAD,CAAP;AACD;AACF,KA9BH,EA+BE,UAAAD,GAAG;AAAA,aAAId,MAAM,CAACc,GAAD,CAAV;AAAA,KA/BL;AAiCD,GAlCM,CAAP;AAmCD","sourcesContent":["import { datumLoad, datumLoadSingle, datumCreate } from '../datum';\n\nimport userDetailsAllowedAttributes from './userDetailsAllowedAttributes';\n\nimport authentication from 'utils/authentication';\nimport reqSecure from 'utils/reqSecure';\nimport { UNAUTHORISED_READ } from 'helpers/constants';\nimport { find } from 'utils/find';\n\nexport default function load(req) {\n  const reqSecured = reqSecure(req, userDetailsAllowedAttributes);\n  return new Promise((resolve, reject) => {\n    authentication(reqSecured).then(\n      user => {\n        if (user) {\n          datumLoadSingle({\n            redisKey: 'userDetails',\n            includeDeleted: user.admin,\n            filter: ud => ud.authorId === user.id,\n          }).then(\n            loadedUserDetails => {\n              datumLoad({\n                redisKey: 'tickets',\n              }).then(ticketData => {\n                const { existingValue: ticket } = find(\n                  ticketData,\n                  user.id,\n                  'reservedTo',\n                );\n                loadedUserDetails.ticket = ticket;\n                resolve(loadedUserDetails);\n              });\n            },\n            err => {\n              resolve(\n                datumCreate({ redisKey: 'userDetails', user }, reqSecured),\n              );\n            },\n          );\n        } else {\n          resolve(UNAUTHORISED_READ);\n        }\n      },\n      err => reject(err),\n    );\n  });\n}\n"],"file":"load.js"}