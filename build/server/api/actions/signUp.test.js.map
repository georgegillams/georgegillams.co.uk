{"version":3,"sources":["../../../../server/api/actions/signUp.test.js"],"names":["test","done","req","body","uname","email","then","result","expect","error","toBe","undefined","errorMessage","authorId","id","toBeTruthy","lastUpdatedTimestamp","session","timestamp","redisKey","filter","u","dbResult"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport signUp from './signUp.js';\nimport { datumLoadSingle } from './datum';\n\ntest('allows a user to be created', done => {\n  const req = {\n    body: {\n      uname: 'user1',\n      email: 'test-user1@georgegillams.co.uk',\n    },\n  };\n  signUp(req).then(result => {\n    expect(result.error).toBe(undefined);\n    expect(result.errorMessage).toBe(undefined);\n    expect(result.authorId).toBe(undefined);\n\n    expect(result.email).toBe('test-user1@georgegillams.co.uk');\n    expect(result.uname).toBe('user1');\n\n    expect(result.id).toBeTruthy();\n    expect(result.lastUpdatedTimestamp).toBeTruthy();\n    expect(result.session).toBeTruthy();\n    expect(result.timestamp).toBeTruthy();\n\n    datumLoadSingle({\n      redisKey: 'users',\n      filter: u => u.id === result.id,\n    }).then(dbResult => {\n      expect(dbResult.authorId).toBe(result.authorId);\n\n      expect(dbResult.email).toBe(result.email);\n      expect(dbResult.uname).toBe(result.uname);\n\n      expect(dbResult.timestamp).toBe(result.timestamp);\n      done();\n    });\n  });\n});\n\ntest('returns error if username is taken', done => {\n  const req = {\n    body: {\n      uname: 'user1',\n      email: 'test-user2@georgegillams.co.uk',\n    },\n  };\n  signUp(req)\n    .then(result => {})\n    .catch(result => {\n      expect(result.error).toBe(`invalid-request`);\n      expect(result.errorMessage).toBe(`Username already taken.`);\n\n      expect(result.authorId).toBe(undefined);\n      expect(result.email).toBe(undefined);\n      expect(result.uname).toBe(undefined);\n      expect(result.id).toBe(undefined);\n      expect(result.lastUpdatedTimestamp).toBe(undefined);\n      expect(result.session).toBe(undefined);\n      expect(result.timestamp).toBe(undefined);\n      done();\n    });\n});\n\ntest('returns error if email is taken', done => {\n  const req = {\n    body: {\n      uname: 'user2',\n      email: 'test-user1@georgegillams.co.uk',\n    },\n  };\n  signUp(req)\n    .then(result => {})\n    .catch(result => {\n      expect(result.error).toBe(`invalid-request`);\n      expect(result.errorMessage).toBe(`Email already taken.`);\n\n      expect(result.authorId).toBe(undefined);\n      expect(result.email).toBe(undefined);\n      expect(result.uname).toBe(undefined);\n      expect(result.id).toBe(undefined);\n      expect(result.lastUpdatedTimestamp).toBe(undefined);\n      expect(result.session).toBe(undefined);\n      expect(result.timestamp).toBe(undefined);\n      done();\n    });\n});\n"],"file":"signUp.test.js"}