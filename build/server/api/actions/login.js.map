{"version":3,"sources":["../../../../server/api/actions/login.js"],"names":["login","req","reqSecured","usersAllowedAttributes","Promise","resolve","reject","redisKey","then","userData","body","email","toLowerCase","userProfile","existingValue","hash","password","INVALID_CREDENTIALS","loginResult"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEe,SAASA,KAAT,CAAeC,GAAf,EAAoB;AACjC,MAAMC,UAAU,GAAG,2BAAUD,GAAV,EAAeE,kCAAf,CAAnB;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACA,0BAAU;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAV,EAAiCC,IAAjC,CAAsC,UAAAC,QAAQ,EAAI;AAAA,kBACT,iBACrCA,QADqC,EAErCP,UAAU,CAACQ,IAAX,CAAgBC,KAAhB,CAAsBC,WAAtB,EAFqC,EAGrC,OAHqC,CADS;AAAA,UACzBC,WADyB,SACxCC,aADwC;;AAMhD,UAAID,WAAJ,EAAiB;AACf,YACE,CAACA,WAAW,CAACE,IAAb,IACA,CAAC,uBAAYb,UAAU,CAACQ,IAAX,CAAgBM,QAA5B,EAAsCH,WAAW,CAACE,IAAlD,CAFH,EAGE;AACAT,UAAAA,MAAM,CAACW,8BAAD,CAAN;AACD,SALD,MAKO;AACL,iCAAUf,UAAV,EAAsBW,WAAtB,EAAmCL,IAAnC,CAAwC,UAAAU,WAAW,EAAI;AACrDb,YAAAA,OAAO,CAACa,WAAD,CAAP;AACD,WAFD;AAGD;AACF,OAXD,MAWO;AACLZ,QAAAA,MAAM,CAACW,8BAAD,CAAN;AACD;AACF,KApBD;AAqBD,GAvBM,CAAP;AAwBD","sourcesContent":["import { datumLoad, datumUpdate } from '../actions/datum';\n\nimport usersAllowedAttributes from './users/usersAllowedAttributes';\n\nimport { find } from 'utils/find';\nimport { INVALID_SESSION, INVALID_CREDENTIALS } from 'helpers/constants';\nimport { hash, compareHash } from 'utils/hash';\nimport setContentLastUpdatedTimestamp from 'utils/setContentLastUpdatedTimestamp';\nimport reqSecure from 'utils/reqSecure';\nimport loginUser from 'utils/login';\n\nexport default function login(req) {\n  const reqSecured = reqSecure(req, usersAllowedAttributes);\n  return new Promise((resolve, reject) => {\n    // Using datum load as we want to avoid invoking authentication when loading users data here\n    datumLoad({ redisKey: 'users' }).then(userData => {\n      const { existingValue: userProfile } = find(\n        userData,\n        reqSecured.body.email.toLowerCase(),\n        'email',\n      );\n      if (userProfile) {\n        if (\n          !userProfile.hash ||\n          !compareHash(reqSecured.body.password, userProfile.hash)\n        ) {\n          reject(INVALID_CREDENTIALS);\n        } else {\n          loginUser(reqSecured, userProfile).then(loginResult => {\n            resolve(loginResult);\n          });\n        }\n      } else {\n        reject(INVALID_CREDENTIALS);\n      }\n    });\n  });\n}\n"],"file":"login.js"}