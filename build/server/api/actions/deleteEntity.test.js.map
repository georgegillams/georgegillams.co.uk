{"version":3,"sources":["../../../../server/api/actions/deleteEntity.test.js"],"names":["test","done","redisKey","body","requestedId","name","then","req","cookies","headers","collectionName","id","result","expect","error","toBe","errorMessage","filter","u","dbResult","toBeTruthy","to","message","apikey","userDbResult","resolveIfNotFound","emailDbResult","deleted","console","log","undefined","user6DbResult","e","user5DbResult"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport deleteEntity from './deleteEntity.js';\nimport { datumLoadSingle, datumCreate, datumUpdate } from './datum';\n\ntest('returns error if not admin', done => {\n  datumCreate(\n    { redisKey: 'users' },\n    { body: { requestedId: 'user5', name: 'George' } },\n  ).then(() => {\n    const req = {\n      cookies: {},\n      headers: {},\n      body: {\n        collectionName: 'users',\n        id: 'user5',\n      },\n    };\n    deleteEntity(req)\n      .then(result => {})\n      .catch(result => {\n        expect(result.error).toBe('auth');\n        expect(result.errorMessage).toBe(\n          'You are not authorised to write to this resource',\n        );\n\n        datumLoadSingle({\n          redisKey: 'users',\n          filter: u => u.id === 'user5',\n        }).then(dbResult => {\n          expect(dbResult).toBeTruthy();\n          expect(dbResult.name).toBe('George');\n          done();\n        });\n      });\n  });\n});\n\ntest('returns error if item is not already marked for deletion', done => {\n  datumCreate(\n    { redisKey: 'emails' },\n    {\n      body: { requestedId: 'email2', to: 'address@example.com', message: 'Hi' },\n    },\n  ).then(() => {\n    const req = {\n      cookies: {},\n      headers: { apikey: 'asdfghjkl' },\n      body: {\n        collectionName: 'users',\n        id: 'user5',\n      },\n    };\n    deleteEntity(req)\n      .then(result => {})\n      .catch(result => {\n        expect(result.error).toBe('wrong-input');\n        expect(result.errorMessage).toBe(\n          'Only deleted entities can be permanently removed.',\n        );\n\n        datumLoadSingle({\n          redisKey: 'users',\n          filter: u => u.id === 'user5',\n        }).then(userDbResult => {\n          expect(userDbResult).toBeTruthy();\n          expect(userDbResult.name).toBe('George');\n          datumLoadSingle({\n            redisKey: 'emails',\n            resolveIfNotFound: true,\n            filter: u => u.id === 'email2',\n          }).then(emailDbResult => {\n            expect(emailDbResult).toBeTruthy();\n            expect(emailDbResult.message).toBe('Hi');\n            done();\n          });\n        });\n      });\n  });\n});\n\ntest('allows permanent deletion of deletedItem if admin', done => {\n  datumCreate(\n    { redisKey: 'users' },\n    {\n      body: { requestedId: 'user6', name: 'Geoff', deleted: true },\n    },\n  ).then(() => {\n    const req = {\n      cookies: {},\n      headers: { apikey: 'asdfghjkl' },\n      body: {\n        collectionName: 'users',\n        id: 'user6',\n      },\n    };\n    deleteEntity(req).then(result => {\n      console.log(`result`, result);\n      expect(result).toBe(undefined);\n\n      datumLoadSingle({\n        redisKey: 'users',\n        resolveIfNotFound: true,\n        filter: u => u.id === 'user6',\n      }).then(user6DbResult => {\n        expect(user6DbResult).toBe(undefined);\n        datumLoadSingle({\n          redisKey: 'emails',\n          resolveIfNotFound: true,\n          filter: e => e.id === 'email2',\n        }).then(emailDbResult => {\n          expect(emailDbResult).toBeTruthy();\n          expect(emailDbResult.message).toBe('Hi');\n          datumLoadSingle({\n            redisKey: 'users',\n            filter: u => u.id === 'user5',\n          }).then(user5DbResult => {\n            expect(user5DbResult).toBeTruthy();\n            expect(user5DbResult.name).toBe('George');\n            done();\n          });\n        });\n      });\n    });\n  });\n});\n"],"file":"deleteEntity.test.js"}