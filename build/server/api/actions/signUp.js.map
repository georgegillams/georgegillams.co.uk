{"version":3,"sources":["../../../../server/api/actions/signUp.js"],"names":["usernameTakenErrorMessage","EMAIL_TAKEN","errorMessage","signUp","req","reqSecured","usersAllowedAttributes","Promise","resolve","reject","redisKey","then","userData","body","email","toLowerCase","userWithSameEmail","existingValue","uname","userWithSameUname","USERNAMES_ENABLED","createdUser","loginResult"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AAMA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,yBAAyB,qBAC1BC,sBAD0B;AAE7BC,EAAAA,YAAY,EAAE;AAFe,EAA/B;;AAKe,SAASC,MAAT,CAAgBC,GAAhB,EAAqB;AAClC,MAAMC,UAAU,GAAG,2BAAUD,GAAV,EAAeE,kCAAf,CAAnB;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACA,0BAAU;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAV,EAAiCC,IAAjC,CAAsC,UAAAC,QAAQ,EAAI;AAAA,kBACH,iBAC3CA,QAD2C,EAE3CP,UAAU,CAACQ,IAAX,CAAgBC,KAAhB,CAAsBC,WAAtB,EAF2C,EAG3C,OAH2C,CADG;AAAA,UACzBC,iBADyB,SACxCC,aADwC;;AAAA,mBAMH,iBAC3CL,QAD2C,EAE3CP,UAAU,CAACQ,IAAX,CAAgBK,KAF2B,EAG3C,OAH2C,CANG;AAAA,UAMzBC,iBANyB,UAMxCF,aANwC;;AAWhD,UAAID,iBAAJ,EAAuB;AACrBP,QAAAA,MAAM,CAACR,sBAAD,CAAN;AACD,OAFD,MAEO,IAAIkB,iBAAiB,IAAIC,4BAAzB,EAA4C;AACjDX,QAAAA,MAAM,CAACT,yBAAD,CAAN;AACD,OAFM,MAEA;AACL,gCAAY;AAAEU,UAAAA,QAAQ,EAAE;AAAZ,SAAZ,EAAmCL,UAAnC,EAA+CM,IAA/C,CAAoD,UAAAU,WAAW,EAAI;AACjE,iCAAUhB,UAAV,EAAsBgB,WAAtB,EAAmCV,IAAnC,CAAwC,UAAAW,WAAW,EAAI;AACrD,0DAA2BA,WAA3B;AACAd,YAAAA,OAAO,CAACc,WAAD,CAAP;AACD,WAHD;AAID,SALD;AAMD;AACF,KAvBD;AAwBD,GA1BM,CAAP;AA2BD","sourcesContent":["import { datumLoad, datumCreate } from '../actions/datum';\n\nimport usersAllowedAttributes from './users/usersAllowedAttributes';\n\nimport { find } from 'utils/find';\nimport {\n  INVALID_SESSION,\n  EMAIL_TAKEN,\n  INVALID_CREDENTIALS,\n  USERNAMES_ENABLED,\n} from 'helpers/constants';\nimport { hash, compareHash } from 'utils/hash';\nimport setContentLastUpdatedTimestamp from 'utils/setContentLastUpdatedTimestamp';\nimport reqSecure from 'utils/reqSecure';\nimport loginUser from 'utils/login';\nimport { sendEmailVerificationEmail } from 'utils/emailHelpers';\n\nconst usernameTakenErrorMessage = {\n  ...EMAIL_TAKEN,\n  errorMessage: 'Username already taken.',\n};\n\nexport default function signUp(req) {\n  const reqSecured = reqSecure(req, usersAllowedAttributes);\n  return new Promise((resolve, reject) => {\n    // Using datum load as we want to avoid invoking authentication when loading users data here\n    datumLoad({ redisKey: 'users' }).then(userData => {\n      const { existingValue: userWithSameEmail } = find(\n        userData,\n        reqSecured.body.email.toLowerCase(),\n        'email',\n      );\n      const { existingValue: userWithSameUname } = find(\n        userData,\n        reqSecured.body.uname,\n        'uname',\n      );\n      if (userWithSameEmail) {\n        reject(EMAIL_TAKEN);\n      } else if (userWithSameUname && USERNAMES_ENABLED) {\n        reject(usernameTakenErrorMessage);\n      } else {\n        datumCreate({ redisKey: 'users' }, reqSecured).then(createdUser => {\n          loginUser(reqSecured, createdUser).then(loginResult => {\n            sendEmailVerificationEmail(loginResult);\n            resolve(loginResult);\n          });\n        });\n      }\n    });\n  });\n}\n"],"file":"signUp.js"}