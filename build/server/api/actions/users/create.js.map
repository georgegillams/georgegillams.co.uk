{"version":3,"sources":["../../../../../server/api/actions/users/create.js"],"names":["create","req","reqSecured","usersAllowedAttributes","Promise","resolve","reject","then","user","redisKey","userData","admin","body","uname","userWithSameUname","existingValue","email","userWithSameEmail","error","reason","password","hash","emailFingerprint","toLowerCase","emailVerified","newUser","message","UNAUTHORISED_WRITE","err"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEe,SAASA,MAAT,CAAgBC,GAAhB,EAAqB;AAClC,MAAMC,UAAU,GAAG,2BAAUD,GAAV,EAAeE,kCAAf,CAAnB;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,oCAAeJ,UAAf,EAA2BK,IAA3B,CACE,UAAAC,IAAI,EAAI;AACN,4BAAU;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAV,EAAiCF,IAAjC,CAAsC,UAAAG,QAAQ,EAAI;AAChD;AACA,YAAKF,IAAI,IAAIA,IAAI,CAACG,KAAd,IAAwB,CAACT,UAAU,CAACU,IAAX,CAAgBD,KAA7C,EAAoD;AAClD;AADkD,sBAEL,iBAC3CD,QAD2C,EAE3CR,UAAU,CAACU,IAAX,CAAgBC,KAF2B,EAG3C,OAH2C,CAFK;AAAA,cAE3BC,iBAF2B,SAE1CC,aAF0C;;AAAA,uBAOL,iBAC3CL,QAD2C,EAE3C,6BAAiBR,UAAU,CAACU,IAAX,CAAgBI,KAAjC,CAF2C,EAG3C,kBAH2C,CAPK;AAAA,cAO3BC,iBAP2B,UAO1CF,aAP0C;;AAYlD,cAAID,iBAAiB,IAAIG,iBAAzB,EAA4C;AAC1CX,YAAAA,MAAM,CAAC;AACLY,cAAAA,KAAK,EAAE,mDADF;AAELC,cAAAA,MAAM,EAAE;AAFH,aAAD,CAAN;AAID,WALD,MAKO;AACL,gBAAIjB,UAAU,CAACU,IAAX,CAAgBQ,QAApB,EAA8B;AAC5BlB,cAAAA,UAAU,CAACU,IAAX,CAAgBS,IAAhB,GAAuB,gBAAKnB,UAAU,CAACU,IAAX,CAAgBQ,QAArB,CAAvB;AACAlB,cAAAA,UAAU,CAACU,IAAX,CAAgBQ,QAAhB,GAA2B,IAA3B;AACD;;AACDlB,YAAAA,UAAU,CAACU,IAAX,CAAgBU,gBAAhB,GAAmC,6BACjCpB,UAAU,CAACU,IAAX,CAAgBI,KADiB,CAAnC;AAGAd,YAAAA,UAAU,CAACU,IAAX,CAAgBI,KAAhB,GAAwBd,UAAU,CAACU,IAAX,CAAgBI,KAAhB,CAAsBO,WAAtB,EAAxB;AACArB,YAAAA,UAAU,CAACU,IAAX,CAAgBY,aAAhB,GAAgC,KAAhC;AACA,oCAAY;AAAEf,cAAAA,QAAQ,EAAE,OAAZ;AAAqBD,cAAAA,IAAI,EAAJA;AAArB,aAAZ,EAAyCN,UAAzC,EAAqDK,IAArD,CACE,UAAAkB,OAAO,EAAI;AACT,4DAA2BA,OAA3B;AACA,qCAAUvB,UAAV,EAAsBuB,OAAtB,EAA+BpB,OAA/B,EAAwCC,MAAxC;AACAD,cAAAA,OAAO,CAAC;AAAEqB,gBAAAA,OAAO,EAAE;AAAX,eAAD,CAAP;AACD,aALH;AAOD;AACF,SAnCD,MAmCO;AACLpB,UAAAA,MAAM,CAACqB,6BAAD,CAAN;AACD;AACF,OAxCD;AAyCD,KA3CH,EA4CE,UAAAC,GAAG;AAAA,aAAItB,MAAM,CAACsB,GAAD,CAAV;AAAA,KA5CL;AA8CD,GA/CM,CAAP;AAgDD","sourcesContent":["import { datumCreate, datumLoad } from '../datum';\n\nimport usersAllowedAttributes from './usersAllowedAttributes';\n\nimport authentication from 'utils/authentication';\nimport { hash } from 'utils/hash';\nimport { find, emailFingerprint } from 'utils/find';\nimport { sendEmailVerificationEmail } from 'utils/emailHelpers';\nimport { UNAUTHORISED_WRITE } from 'helpers/constants';\nimport reqSecure from 'utils/reqSecure';\nimport loginUser from 'utils/login';\n\nexport default function create(req) {\n  const reqSecured = reqSecure(req, usersAllowedAttributes);\n  return new Promise((resolve, reject) => {\n    authentication(reqSecured).then(\n      user => {\n        datumLoad({ redisKey: 'users' }).then(userData => {\n          // Only admins can create admins!\n          if ((user && user.admin) || !reqSecured.body.admin) {\n            // If a user already has the username, we cannot allow a new one to be created\n            const { existingValue: userWithSameUname } = find(\n              userData,\n              reqSecured.body.uname,\n              'uname',\n            );\n            const { existingValue: userWithSameEmail } = find(\n              userData,\n              emailFingerprint(reqSecured.body.email),\n              'emailFingerprint',\n            );\n            if (userWithSameUname || userWithSameEmail) {\n              reject({\n                error: 'A user with that username or email already exists',\n                reason: 'A user with that username already exists',\n              });\n            } else {\n              if (reqSecured.body.password) {\n                reqSecured.body.hash = hash(reqSecured.body.password);\n                reqSecured.body.password = null;\n              }\n              reqSecured.body.emailFingerprint = emailFingerprint(\n                reqSecured.body.email,\n              );\n              reqSecured.body.email = reqSecured.body.email.toLowerCase();\n              reqSecured.body.emailVerified = false;\n              datumCreate({ redisKey: 'users', user }, reqSecured).then(\n                newUser => {\n                  sendEmailVerificationEmail(newUser);\n                  loginUser(reqSecured, newUser, resolve, reject);\n                  resolve({ message: 'User created' });\n                },\n              );\n            }\n          } else {\n            reject(UNAUTHORISED_WRITE);\n          }\n        });\n      },\n      err => reject(err),\n    );\n  });\n}\n"],"file":"create.js"}