{"version":3,"sources":["../../../../server/api/actions/verifyemail.js"],"names":["verifyemail","req","Promise","resolve","reject","verificationKey","body","redisKey","then","emailVerificationData","emailVerification","existingValue","Date","now","expiry","getTime","userData","userId","user","emailVerified","error","errorMessage"],"mappings":";;;;;;;AAAA;;AAEA;;AAEe,SAASA,WAAT,CAAqBC,GAArB,EAA0B;AACvC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA,QAC9BC,eAD8B,GACVJ,GAAG,CAACK,IADM,CAC9BD,eAD8B;AAEtC,0BAAU;AAAEE,MAAAA,QAAQ,EAAE;AAAZ,KAAV,EAAkDC,IAAlD,CACE,UAAAC,qBAAqB,EAAI;AACvB;AADuB,kBAEsB,iBAC3CA,qBAD2C,EAE3CJ,eAF2C,EAG3C,KAH2C,CAFtB;AAAA,UAEAK,iBAFA,SAEfC,aAFe;;AAOvB,UAAID,iBAAJ,EAAuB;AACrB,YAAIE,IAAI,CAACC,GAAL,KAAa,IAAID,IAAJ,CAASF,iBAAiB,CAACI,MAA3B,EAAmCC,OAAnC,EAAjB,EAA+D;AAC7D;AACAL,UAAAA,iBAAiB,CAACI,MAAlB,GAA2B,CAA3B;AACA,kCACE;AAAEP,YAAAA,QAAQ,EAAE;AAAZ,WADF,EAEE;AAAED,YAAAA,IAAI,EAAEI;AAAR,WAFF;AAIA,gCAAU;AAAEH,YAAAA,QAAQ,EAAE;AAAZ,WAAV,EAAiCC,IAAjC,CAAsC,UAAAQ,QAAQ,EAAI;AAAA,yBAChB,iBAC9BA,QAD8B,EAE9BN,iBAAiB,CAACO,MAFY,CADgB;AAAA,gBACzBC,IADyB,UACxCP,aADwC;;AAKhD,gBAAIO,IAAJ,EAAU;AACRA,cAAAA,IAAI,CAACC,aAAL,GAAqB,IAArB;AACAhB,cAAAA,OAAO,CAAC,wBAAY;AAAEI,gBAAAA,QAAQ,EAAE;AAAZ,eAAZ,EAAmC;AAAED,gBAAAA,IAAI,EAAEY;AAAR,eAAnC,CAAD,CAAP;AACD,aAHD,MAGO;AACLd,cAAAA,MAAM,CAAC;AAAEgB,gBAAAA,KAAK,EAAE,aAAT;AAAwBC,gBAAAA,YAAY,EAAE;AAAtC,eAAD,CAAN;AACD;AACF,WAXD;AAYD,SAnBD,MAmBO;AACLjB,UAAAA,MAAM,CAAC;AACLgB,YAAAA,KAAK,EAAE,aADF;AAELC,YAAAA,YAAY,EAAE;AAFT,WAAD,CAAN;AAID;AACF,OA1BD,MA0BO;AACLjB,QAAAA,MAAM,CAAC;AACLgB,UAAAA,KAAK,EAAE,aADF;AAELC,UAAAA,YAAY,EAAE;AAFT,SAAD,CAAN;AAID;AACF,KAxCH;AA0CD,GA5CM,CAAP;AA6CD","sourcesContent":["import { datumLoad, datumUpdate } from '../actions/datum';\n\nimport { find } from 'utils/find';\n\nexport default function verifyemail(req) {\n  return new Promise((resolve, reject) => {\n    const { verificationKey } = req.body;\n    datumLoad({ redisKey: 'emailVerificationCodes' }).then(\n      emailVerificationData => {\n        // `find` uses `safeCompare` so it is safe to use for finding the entry that matches the key\n        const { existingValue: emailVerification } = find(\n          emailVerificationData,\n          verificationKey,\n          'key',\n        );\n        if (emailVerification) {\n          if (Date.now() < new Date(emailVerification.expiry).getTime()) {\n            // invalidate magic link (set expiry to 0)\n            emailVerification.expiry = 0;\n            datumUpdate(\n              { redisKey: 'emailVerificationCodes' },\n              { body: emailVerification },\n            );\n            datumLoad({ redisKey: 'users' }).then(userData => {\n              const { existingValue: user } = find(\n                userData,\n                emailVerification.userId,\n              );\n              if (user) {\n                user.emailVerified = true;\n                resolve(datumUpdate({ redisKey: 'users' }, { body: user }));\n              } else {\n                reject({ error: 'wrong-input', errorMessage: 'Invalid user' });\n              }\n            });\n          } else {\n            reject({\n              error: 'wrong-input',\n              errorMessage: 'Email verification link has expired',\n            });\n          }\n        } else {\n          reject({\n            error: 'wrong-input',\n            errorMessage: 'Invalid verification link',\n          });\n        }\n      },\n    );\n  });\n}\n"],"file":"verifyemail.js"}