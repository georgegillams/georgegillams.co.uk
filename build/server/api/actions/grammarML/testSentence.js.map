{"version":3,"sources":["../../../../../server/api/actions/grammarML/testSentence.js"],"names":["test","req","reqSecured","grammarMLAllowedAttributes","Promise","resolve","reject","then","user","text","body","redisKey","trainingData","testData","annotatedData","annotatedTestData","dataMatrix","testDataMatrix","classifier","result","correctResult","toLowerCase","includes","THERE_VALUE","split","join","THEIR_VALUE","err"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AACA;;AASA;;AACA;;AACA;;AAEe,SAASA,IAAT,CAAcC,GAAd,EAAmB;AAChC,MAAMC,UAAU,GAAG,2BAAUD,GAAV,EAAeE,sCAAf,CAAnB;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,oCAAeJ,UAAf,EAA2BK,IAA3B,CACE,UAAAC,IAAI,EAAI;AAAA,UACEC,IADF,GACWP,UAAU,CAACQ,IADtB,CACED,IADF;AAEN,4BAAU;AACRE,QAAAA,QAAQ,EAAE;AADF,OAAV,EAEGJ,IAFH,CAEQ,UAAAK,YAAY,EAAI;AACtB,YAAMC,QAAQ,GAAG,CAACX,UAAU,CAACQ,IAAZ,CAAjB;AACA,YAAMI,aAAa,GAAG,gCAAkBF,YAAlB,CAAtB;AACA,YAAMG,iBAAiB,GAAG,gCAAkBF,QAAlB,CAA1B;AACA,YAAMG,UAAU,GAAG,gCAAkBF,aAAlB,CAAnB;AACA,YAAIG,cAAc,GAAG,gCAAkBF,iBAAlB,CAArB,CALsB,CAMtB;AACA;AACA;;AACAE,QAAAA,cAAc,GAAGA,cAAc,CAAC,CAAD,CAAd,CAAkB,CAAlB,CAAjB,CATsB,CAWtB;AACA;;AACA,YAAMC,UAAU,GAAG,yBAAWF,UAAX,CAAnB;AACA,YAAMG,MAAM,GAAG,4BAAcD,UAAd,EAA0BD,cAA1B,CAAf;AACA,YAAIG,aAAa,GAAG,8CAApB;;AACA,YACEX,IAAI,CAACY,WAAL,GAAmBC,QAAnB,CAA4B,OAA5B,KACAb,IAAI,CAACY,WAAL,GAAmBC,QAAnB,CAA4B,OAA5B,CAFF,EAGE;AACAF,UAAAA,aAAa,GAAG,qBAAhB;AACD;;AACD,YAAID,MAAM,KAAKI,oBAAX,IAA0Bd,IAAI,CAACY,WAAL,GAAmBC,QAAnB,CAA4B,OAA5B,CAA9B,EAAoE;AAClEF,UAAAA,aAAa,GAAG,sCAAhB;AACAA,UAAAA,aAAa,IAAIX,IAAI,CAClBY,WADc,GAEdG,KAFc,UAGdC,IAHc,CAGT,OAHS,CAAjB;AAID;;AACD,YAAIN,MAAM,KAAKO,oBAAX,IAA0BjB,IAAI,CAACY,WAAL,GAAmBC,QAAnB,CAA4B,OAA5B,CAA9B,EAAoE;AAClEF,UAAAA,aAAa,GAAG,sCAAhB;AACAA,UAAAA,aAAa,IAAIX,IAAI,CAClBY,WADc,GAEdG,KAFc,UAGdC,IAHc,CAGT,OAHS,CAAjB;AAID,SAnCqB,CAoCtB;;;AACApB,QAAAA,OAAO,CAAC;AAAEc,UAAAA,MAAM,EAAEC;AAAV,SAAD,CAAP;AACD,OAxCD;AAyCD,KA5CH,EA6CE,UAAAO,GAAG;AAAA,aAAIrB,MAAM,CAACqB,GAAD,CAAV;AAAA,KA7CL;AA+CD,GAhDM,CAAP;AAiDD","sourcesContent":["import jsregression from 'js-regression';\nimport winkPerceptron from 'wink-perceptron';\n\nimport { datumUpdate, datumLoad } from '../datum';\n\nimport grammarMLAllowedAttributes from './grammarMLAllowedAttributes';\nimport {\n  annotateSentences,\n  extractDataMatrix,\n  trainModel,\n  useClassifier,\n  THERE_VALUE,\n  THEIR_VALUE,\n} from './helpers';\n\nimport authentication from 'utils/authentication';\nimport { UNAUTHORISED_WRITE } from 'helpers/constants';\nimport reqSecure from 'utils/reqSecure';\n\nexport default function test(req) {\n  const reqSecured = reqSecure(req, grammarMLAllowedAttributes);\n  return new Promise((resolve, reject) => {\n    authentication(reqSecured).then(\n      user => {\n        const { text } = reqSecured.body;\n        datumLoad({\n          redisKey: 'grammarML',\n        }).then(trainingData => {\n          const testData = [reqSecured.body];\n          const annotatedData = annotateSentences(trainingData);\n          const annotatedTestData = annotateSentences(testData);\n          const dataMatrix = extractDataMatrix(annotatedData);\n          let testDataMatrix = extractDataMatrix(annotatedTestData);\n          // const normaliser = getDataNormaliser(dataMatrix);\n          // dataMatrix = dataMatrix.map(normaliser);\n          // testDataMatrix = dataMatrix.map(normaliser);\n          testDataMatrix = testDataMatrix[0][0];\n\n          // console.log(`dataMatrix`, dataMatrix);\n          // console.log(`testDataMatrix`, testDataMatrix);\n          const classifier = trainModel(dataMatrix);\n          const result = useClassifier(classifier, testDataMatrix);\n          let correctResult = \"Sentence does not contain 'there' or 'their'\";\n          if (\n            text.toLowerCase().includes('there') ||\n            text.toLowerCase().includes('their')\n          ) {\n            correctResult = 'Sentence is correct';\n          }\n          if (result === THERE_VALUE && text.toLowerCase().includes('their')) {\n            correctResult = 'Sentence is incorrect. Should read: ';\n            correctResult += text\n              .toLowerCase()\n              .split(`their`)\n              .join('there');\n          }\n          if (result === THEIR_VALUE && text.toLowerCase().includes('there')) {\n            correctResult = 'Sentence is incorrect. Should read: ';\n            correctResult += text\n              .toLowerCase()\n              .split(`there`)\n              .join('their');\n          }\n          // console.log(`correctResult`, correctResult);\n          resolve({ result: correctResult });\n        });\n      },\n      err => reject(err),\n    );\n  });\n}\n"],"file":"testSentence.js"}