{"version":3,"sources":["../../../../../server/api/actions/grammarML/create.js"],"names":["create","req","reqSecured","grammarMLAllowedAttributes","Promise","resolve","reject","then","user","text","body","sentences","split","join","tasks","filter","s","toLowerCase","includes","map","res","redisKey","trim","r","all","result","err"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AAEe,SAASA,MAAT,CAAgBC,GAAhB,EAAqB;AAClC,MAAMC,UAAU,GAAG,2BAAUD,GAAV,EAAeE,sCAAf,CAAnB;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,oCAAeJ,UAAf,EAA2BK,IAA3B,CACE,UAAAC,IAAI,EAAI;AAAA,UACEC,IADF,GACWP,UAAU,CAACQ,IADtB,CACED,IADF;AAEN,UAAME,SAAS,GAAGF,IAAI,CACnBG,KADe,CACT,GADS,EAEfC,IAFe,CAEV,aAFU,EAGfD,KAHe,CAGT,GAHS,EAIfC,IAJe,CAIV,aAJU,EAKfD,KALe,CAKT,GALS,EAMfC,IANe,CAMV,aANU,EAOfD,KAPe,CAOT,YAPS,CAAlB;AASA,UAAME,KAAK,GAAGH,SAAS,CACpBI,MADW,CAEV,UAAAC,CAAC;AAAA,eACCA,CAAC,KAAK,EAAN,KACCA,CAAC,CAACC,WAAF,GAAgBC,QAAhB,CAAyB,OAAzB,KACCF,CAAC,CAACC,WAAF,GAAgBC,QAAhB,CAAyB,OAAzB,CAFF,CADD;AAAA,OAFS,EAOXC,GAPW,CAQV,UAAAH,CAAC;AAAA,eACC,IAAIZ,OAAJ,CAAY,UAAAgB,GAAG,EAAI;AACjB,kCACE;AAAEC,YAAAA,QAAQ,EAAE,WAAZ;AAAyBb,YAAAA,IAAI,EAAJA;AAAzB,WADF,EAEE;AAAEE,YAAAA,IAAI,EAAE;AAAED,cAAAA,IAAI,EAAEO,CAAC,CAACM,IAAF;AAAR;AAAR,WAFF,EAGEf,IAHF,CAGO,UAAAgB,CAAC;AAAA,mBAAIH,GAAG,CAACG,CAAD,CAAP;AAAA,WAHR;AAID,SALD,CADD;AAAA,OARS,CAAd;AAiBAnB,MAAAA,OAAO,CAACoB,GAAR,CAAYV,KAAZ,EAAmBP,IAAnB,CAAwB,UAAAkB,MAAM,EAAI;AAChCpB,QAAAA,OAAO,CAACoB,MAAD,CAAP;AACD,OAFD;AAGD,KAhCH,EAiCE,UAAAC,GAAG;AAAA,aAAIpB,MAAM,CAACoB,GAAD,CAAV;AAAA,KAjCL;AAmCD,GApCM,CAAP;AAqCD","sourcesContent":["import { datumCreate } from '../datum';\n\nimport grammarMLAllowedAttributes from './grammarMLAllowedAttributes';\n\nimport authentication from 'utils/authentication';\nimport reqSecure from 'utils/reqSecure';\n\nexport default function create(req) {\n  const reqSecured = reqSecure(req, grammarMLAllowedAttributes);\n  return new Promise((resolve, reject) => {\n    authentication(reqSecured).then(\n      user => {\n        const { text } = reqSecured.body;\n        const sentences = text\n          .split('.')\n          .join('.SPLIT_HERE')\n          .split('?')\n          .join('?SPLIT_HERE')\n          .split('!')\n          .join('!SPLIT_HERE')\n          .split('SPLIT_HERE');\n\n        const tasks = sentences\n          .filter(\n            s =>\n              s !== '' &&\n              (s.toLowerCase().includes('there') ||\n                s.toLowerCase().includes('their')),\n          )\n          .map(\n            s =>\n              new Promise(res => {\n                datumCreate(\n                  { redisKey: 'grammarML', user },\n                  { body: { text: s.trim() } },\n                ).then(r => res(r));\n              }),\n          );\n\n        Promise.all(tasks).then(result => {\n          resolve(result);\n        });\n      },\n      err => reject(err),\n    );\n  });\n}\n"],"file":"create.js"}