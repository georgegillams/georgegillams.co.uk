{"version":3,"sources":["../../../../../server/api/actions/grammarML/testPerformance.js"],"names":["test","req","reqSecured","grammarMLAllowedAttributes","Promise","resolve","reject","then","user","ratio","body","redisKey","allData","parseFloat","trainingData","testData","annotatedData","annotatedTestData","dataMatrix","testDataMatrix","predictionsMade","correctPredictions","classifier","forEach","td","testItem","result","label","err"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AACA;;AAQA;;AACA;;AACA;;AAEe,SAASA,IAAT,CAAcC,GAAd,EAAmB;AAChC,MAAMC,UAAU,GAAG,2BAAUD,GAAV,EAAeE,sCAAf,CAAnB;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,oCAAeJ,UAAf,EAA2BK,IAA3B,CACE,UAAAC,IAAI,EAAI;AAAA,UACEC,KADF,GACYP,UAAU,CAACQ,IADvB,CACED,KADF;AAEN,4BAAU;AACRE,QAAAA,QAAQ,EAAE;AADF,OAAV,EAEGJ,IAFH,CAEQ,UAAAK,OAAO,EAAI;AAAA,yBACkB,wBACjCA,OADiC,EAEjCC,UAAU,CAACJ,KAAD,CAFuB,CADlB;AAAA,YACTK,YADS,cACTA,YADS;AAAA,YACKC,QADL,cACKA,QADL;;AAKjB,YAAMC,aAAa,GAAG,gCAAkBF,YAAlB,CAAtB;AACA,YAAMG,iBAAiB,GAAG,gCAAkBF,QAAlB,CAA1B;AACA,YAAMG,UAAU,GAAG,gCAAkBF,aAAlB,CAAnB;AACA,YAAMG,cAAc,GAAG,gCAAkBF,iBAAlB,CAAvB,CARiB,CASjB;AACA;AACA;AAEA;AACA;;AAEA,YAAIG,eAAe,GAAG,CAAtB;AACA,YAAIC,kBAAkB,GAAG,CAAzB;AAEA,YAAMC,UAAU,GAAG,yBAAWJ,UAAX,CAAnB;AACAC,QAAAA,cAAc,CAACI,OAAf,CAAuB,UAAAC,EAAE,EAAI;AAC3B,cAAMC,QAAQ,GAAGD,EAAE,CAAC,CAAD,CAAnB,CAD2B,CAE3B;;AACA,cAAME,MAAM,GAAG,4BAAcJ,UAAd,EAA0BG,QAA1B,CAAf,CAH2B,CAI3B;;AACAL,UAAAA,eAAe,IAAI,CAAnB;;AACA,cAAIM,MAAM,KAAKF,EAAE,CAAC,CAAD,CAAF,CAAMG,KAArB,EAA4B;AAC1BN,YAAAA,kBAAkB,IAAI,CAAtB;AACD;AACF,SATD,EApBiB,CA8BjB;;AACAhB,QAAAA,OAAO,CAAC;AAAEqB,UAAAA,MAAM,EAAEL,kBAAkB,GAAGD;AAA/B,SAAD,CAAP;AACD,OAlCD;AAmCD,KAtCH,EAuCE,UAAAQ,GAAG;AAAA,aAAItB,MAAM,CAACsB,GAAD,CAAV;AAAA,KAvCL;AAyCD,GA1CM,CAAP;AA2CD","sourcesContent":["import jsregression from 'js-regression';\nimport winkPerceptron from 'wink-perceptron';\n\nimport { datumUpdate, datumLoad } from '../datum';\n\nimport grammarMLAllowedAttributes from './grammarMLAllowedAttributes';\nimport {\n  annotateSentences,\n  extractDataMatrix,\n  trainModel,\n  useClassifier,\n  splitData,\n} from './helpers';\n\nimport authentication from 'utils/authentication';\nimport { UNAUTHORISED_WRITE } from 'helpers/constants';\nimport reqSecure from 'utils/reqSecure';\n\nexport default function test(req) {\n  const reqSecured = reqSecure(req, grammarMLAllowedAttributes);\n  return new Promise((resolve, reject) => {\n    authentication(reqSecured).then(\n      user => {\n        const { ratio } = reqSecured.body;\n        datumLoad({\n          redisKey: 'grammarML',\n        }).then(allData => {\n          const { trainingData, testData } = splitData(\n            allData,\n            parseFloat(ratio),\n          );\n          const annotatedData = annotateSentences(trainingData);\n          const annotatedTestData = annotateSentences(testData);\n          const dataMatrix = extractDataMatrix(annotatedData);\n          const testDataMatrix = extractDataMatrix(annotatedTestData);\n          // const normaliser = getDataNormaliser(dataMatrix);\n          // dataMatrix = dataMatrix.map(normaliser);\n          // testDataMatrix = dataMatrix.map(normaliser);\n\n          // console.log(`dataMatrix`, dataMatrix);\n          // console.log(`testDataMatrix`, testDataMatrix);\n\n          let predictionsMade = 0;\n          let correctPredictions = 0;\n\n          const classifier = trainModel(dataMatrix);\n          testDataMatrix.forEach(td => {\n            const testItem = td[0];\n            // console.log(`testItem`, testItem);\n            const result = useClassifier(classifier, testItem);\n            // console.log(`label`, td[1].label);\n            predictionsMade += 1;\n            if (result === td[1].label) {\n              correctPredictions += 1;\n            }\n          });\n          // console.log(`correctResult`, correctResult);\n          resolve({ result: correctPredictions / predictionsMade });\n        });\n      },\n      err => reject(err),\n    );\n  });\n}\n"],"file":"testPerformance.js"}