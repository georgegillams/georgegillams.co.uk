{"version":3,"sources":["../../../../../server/api/actions/grammarML/helpers.js"],"names":["THEIR_VALUE","THERE_VALUE","getLastTwoCharValues","word","result","wordLength","length","charCodeAt","annotateSentences","data","map","d","res","JSON","parse","stringify","text","lowerCaseText","toLowerCase","split","charLength","endingCharacter","label","includes","postTheireText","preTheireText","charPositionOfTheire","wordPositionOfTheire","wordBeforeEnding","wordAfterEnding","wordsBefore","wordBeforeIndex","wordBefore","wordsAfter","wordAfterIndex","wordAfter","extractDataMatrix","final","resX","id","timestamp","lastUpdatedTimestamp","authorId","resY","trainModel","perceptron","defineConfig","shuffleData","maxIterations","learn","useClassifier","classifier","testData","prediction","predict","splitData","arr","ratio","trainingData","forEach","a","randomNumber","Math","random","push"],"mappings":"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","sourcesContent":["import jsregression from 'js-regression';\nimport winkPerceptron from 'wink-perceptron';\n\nimport { datumUpdate, datumLoad } from '../datum';\n\nimport grammarMLAllowedAttributes from './grammarMLAllowedAttributes';\n\nimport authentication from 'utils/authentication';\nimport { UNAUTHORISED_WRITE } from 'helpers/constants';\nimport reqSecure from 'utils/reqSecure';\n\nconst THEIR_VALUE = 'THEIR';\nconst THERE_VALUE = 'THERE';\n\nconst getLastTwoCharValues = word => {\n  let result = 0;\n  const wordLength = word.length;\n  result += word.charCodeAt(wordLength - 1);\n  result += word.charCodeAt(wordLength - 2);\n  return result;\n};\n\nconst annotateSentences = data =>\n  data.map(d => {\n    const res = JSON.parse(JSON.stringify(d));\n    if (!d || !d.text || d.text.length < 5) {\n      return null;\n    }\n    const lowerCaseText = d.text.toLowerCase();\n    res.wordLength = d.text.split(' ').length;\n    res.charLength = d.text.length;\n    res.endingCharacter = d.text.charCodeAt(res.charLength - 1);\n    res.label = '';\n    res.label += lowerCaseText.includes(`their`) ? THEIR_VALUE : '';\n    res.label += lowerCaseText.includes(`there`) ? THERE_VALUE : '';\n\n    let postTheireText = lowerCaseText;\n    if (postTheireText.includes('there')) {\n      postTheireText = postTheireText.split(`there`)[1];\n    }\n    if (postTheireText.includes('their')) {\n      postTheireText = postTheireText.split('their')[1];\n    }\n    const preTheireText = lowerCaseText.split(`there`)[0].split('their')[0];\n    res.charPositionOfTheire = preTheireText.length;\n    res.wordPositionOfTheire = preTheireText.split(' ').length - 1;\n\n    res.wordBeforeEnding = 0;\n    res.wordAfterEnding = 0;\n\n    const wordsBefore = preTheireText.split(' ');\n    const wordBeforeIndex = wordsBefore.length - 2;\n    if (wordBeforeIndex >= 0) {\n      const wordBefore = wordsBefore[wordBeforeIndex];\n      res.wordBeforeEnding = getLastTwoCharValues(wordBefore);\n    }\n\n    if (postTheireText) {\n      const wordsAfter = postTheireText.split(' ');\n      const wordAfterIndex = 1;\n      if (wordAfterIndex > wordsAfter.length) {\n        const wordAfter = wordsAfter[wordAfterIndex];\n        res.wordAfterEnding = getLastTwoCharValues(wordAfter);\n      }\n    }\n\n    return res;\n  });\n\nconst extractDataMatrix = data => {\n  const final = data.map(d => {\n    if (!d) {\n      return null;\n    }\n    const resX = JSON.parse(JSON.stringify(d));\n    delete resX.text;\n    delete resX.label;\n    delete resX.id;\n    delete resX.timestamp;\n    delete resX.lastUpdatedTimestamp;\n    delete resX.authorId;\n    const resY = { label: d.label };\n    return [resX, resY];\n  });\n  return final;\n};\n\n// const scanData = dataMatrix => {\n//   const mins = {};\n//   const maxs = {};\n//   const averages = {};\n//\n//   dataMatrix.forEach(data => {\n//     const dataX = data[0];\n//     Object.keys(dataX).forEach(k => {\n//       if (!mins[k]) {\n//         mins[k] = 100000000;\n//       }\n//       if (!maxs[k]) {\n//         maxs[k] = -100000000;\n//       }\n//       if (!averages[k]) {\n//         averages[k] = 0;\n//       }\n//       console.log(`k`, k);\n//       mins[k] = Math.min(dataX[k], mins[k]);\n//       maxs[k] = Math.max(dataX[k], maxs[k]);\n//       averages[k] += dataX[k] / dataMatrix.length;\n//     });\n//   });\n//\n//   return { mins, maxs, averages };\n// };\n//\n// const getDataNormaliser = dataMatrix => {\n//   const { mins, maxs, averages } = scanData(dataMatrix);\n//   console.log(`mins`, mins);\n//   console.log(`maxs`, maxs);\n//   console.log(`averages`, averages);\n//   // TODO - IMPLEMENT\n//\n//   return d => {\n//     return d;\n//   };\n// };\n\nconst trainModel = data => {\n  const perceptron = winkPerceptron();\n  perceptron.defineConfig({ shuffleData: true, maxIterations: 21 });\n  perceptron.learn(data);\n  return perceptron;\n};\n\nconst useClassifier = (classifier, testData) => {\n  const prediction = classifier.predict(testData);\n  return prediction;\n};\n\nconst splitData = (arr, ratio) => {\n  const trainingData = [];\n  const testData = [];\n  arr.forEach(a => {\n    const randomNumber = Math.random();\n    if (randomNumber < ratio) {\n      trainingData.push(a);\n    } else {\n      testData.push(a);\n    }\n  });\n  return { trainingData, testData };\n};\n\nexport {\n  useClassifier,\n  trainModel,\n  extractDataMatrix,\n  annotateSentences,\n  THERE_VALUE,\n  THEIR_VALUE,\n  splitData,\n};\n"],"file":"helpers.js"}