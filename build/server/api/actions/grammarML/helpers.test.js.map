{"version":3,"sources":["../../../../../server/api/actions/grammarML/helpers.test.js"],"names":["test","done","testData","text","annotated","expect","length","toBe","wordLength","charLength","endingCharacter","label","toEqual","THEIR_VALUE","charPositionOfTheire","wordPositionOfTheire","THERE_VALUE"],"mappings":"AAAA;AAEA;;;;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AAUA;;AACA;;AACA;;AAEAA,IAAI,CAAC,+BAAD,EAAkC,UAAAC,IAAI,EAAI;AAC5C,MAAMC,QAAQ,GAAG,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAjB;AAEA,MAAMC,SAAS,GAAG,gCAAkBF,QAAlB,CAAlB;AAEAG,EAAAA,MAAM,CAACD,SAAS,CAACE,MAAX,CAAN,CAAyBC,IAAzB,CAA8B,CAA9B;AACAF,EAAAA,MAAM,CAACD,SAAS,CAAC,CAAD,CAAT,CAAaI,UAAd,CAAN,CAAgCD,IAAhC,CAAqC,CAArC;AACAF,EAAAA,MAAM,CAACD,SAAS,CAAC,CAAD,CAAT,CAAaK,UAAd,CAAN,CAAgCF,IAAhC,CAAqC,EAArC;AACAF,EAAAA,MAAM,CAACD,SAAS,CAAC,CAAD,CAAT,CAAaM,eAAd,CAAN,CAAqCH,IAArC,CAA0C,EAA1C;AACAF,EAAAA,MAAM,CAACD,SAAS,CAAC,CAAD,CAAT,CAAaO,KAAd,CAAN,CAA2BC,OAA3B,CAAmCC,oBAAnC;AACAR,EAAAA,MAAM,CAACD,SAAS,CAAC,CAAD,CAAT,CAAaU,oBAAd,CAAN,CAA0CP,IAA1C,CAA+C,CAA/C;AACAF,EAAAA,MAAM,CAACD,SAAS,CAAC,CAAD,CAAT,CAAaW,oBAAd,CAAN,CAA0CR,IAA1C,CAA+C,CAA/C;AAEAN,EAAAA,IAAI;AACL,CAdG,CAAJ;AAgBAD,IAAI,CAAC,mDAAD,EAAsD,UAAAC,IAAI,EAAI;AAChE,MAAMC,QAAQ,GAAG,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAjB;AAEA,MAAMC,SAAS,GAAG,gCAAkBF,QAAlB,CAAlB;AAEAG,EAAAA,MAAM,CAACD,SAAS,CAACE,MAAX,CAAN,CAAyBC,IAAzB,CAA8B,CAA9B;AACAF,EAAAA,MAAM,CAACD,SAAS,CAAC,CAAD,CAAT,CAAaI,UAAd,CAAN,CAAgCD,IAAhC,CAAqC,CAArC;AACAF,EAAAA,MAAM,CAACD,SAAS,CAAC,CAAD,CAAT,CAAaK,UAAd,CAAN,CAAgCF,IAAhC,CAAqC,EAArC;AACAF,EAAAA,MAAM,CAACD,SAAS,CAAC,CAAD,CAAT,CAAaM,eAAd,CAAN,CAAqCH,IAArC,CAA0C,EAA1C;AACAF,EAAAA,MAAM,CAACD,SAAS,CAAC,CAAD,CAAT,CAAaO,KAAd,CAAN,CAA2BC,OAA3B,CAAmCI,oBAAnC;AACAX,EAAAA,MAAM,CAACD,SAAS,CAAC,CAAD,CAAT,CAAaU,oBAAd,CAAN,CAA0CP,IAA1C,CAA+C,CAA/C;AACAF,EAAAA,MAAM,CAACD,SAAS,CAAC,CAAD,CAAT,CAAaW,oBAAd,CAAN,CAA0CR,IAA1C,CAA+C,CAA/C;AAEAN,EAAAA,IAAI;AACL,CAdG,CAAJ","sourcesContent":["#!/usr/bin/env node\n\n// eslint-disable-next-line\nimport jsregression from 'js-regression';\nimport winkPerceptron from 'wink-perceptron';\n\nimport { datumUpdate, datumLoad } from '../datum';\n\nimport grammarMLAllowedAttributes from './grammarMLAllowedAttributes';\nimport {\n  annotateSentences,\n  extractDataMatrix,\n  trainModel,\n  useClassifier,\n  splitData,\n  THEIR_VALUE,\n  THERE_VALUE,\n} from './helpers';\n\nimport authentication from 'utils/authentication';\nimport { UNAUTHORISED_WRITE } from 'helpers/constants';\nimport reqSecure from 'utils/reqSecure';\n\ntest('correctly annotates sentences', done => {\n  const testData = [{ text: 'Put their stuff away.' }];\n\n  const annotated = annotateSentences(testData);\n\n  expect(annotated.length).toBe(1);\n  expect(annotated[0].wordLength).toBe(4);\n  expect(annotated[0].charLength).toBe(21);\n  expect(annotated[0].endingCharacter).toBe(46);\n  expect(annotated[0].label).toEqual(THEIR_VALUE);\n  expect(annotated[0].charPositionOfTheire).toBe(4);\n  expect(annotated[0].wordPositionOfTheire).toBe(1);\n\n  done();\n});\n\ntest('correctly annotates sentences with capitalisation', done => {\n  const testData = [{ text: 'There she was.' }];\n\n  const annotated = annotateSentences(testData);\n\n  expect(annotated.length).toBe(1);\n  expect(annotated[0].wordLength).toBe(3);\n  expect(annotated[0].charLength).toBe(14);\n  expect(annotated[0].endingCharacter).toBe(46);\n  expect(annotated[0].label).toEqual(THERE_VALUE);\n  expect(annotated[0].charPositionOfTheire).toBe(0);\n  expect(annotated[0].wordPositionOfTheire).toBe(0);\n\n  done();\n});\n"],"file":"helpers.test.js"}