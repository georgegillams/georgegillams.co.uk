{"version":3,"sources":["../../../../../server/api/actions/monzo/loadPots.js"],"names":["loadPots","req","Promise","resolve","reject","body","password","then","potData","error","warning","processedData","POT_CONFIGS","map","potConfig","pot","filter","p","name","deleted","errorMessage","goalAmount","parseFloat","goal_amount","balance","monthsElapsedPercentage","expectedSavingsSoFar","startAmount","shortfall","percentageExpected","percentageComplete","Math","ceil","err"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,8BAAYH,GAAG,CAACI,IAAJ,CAASC,QAArB,EAA+BC,IAA/B,CACE,UAAAC,OAAO,EAAI;AACT,UAAIA,OAAO,CAACC,KAAR,IAAiBD,OAAO,CAACE,OAA7B,EAAsC;AACpCP,QAAAA,OAAO,CAACK,OAAD,CAAP;AACA;AACD;;AACD,UAAMG,aAAa,GAAGC,uBAAYC,GAAZ,CAAgB,UAAAC,SAAS,EAAI;AACjD,YAAMC,GAAG,GAAGP,OAAO,CAACQ,MAAR,CACV,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACC,IAAF,KAAWJ,SAAS,CAACI,IAArB,IAA6B,CAACD,CAAC,CAACE,OAApC;AAAA,SADS,EAEV,CAFU,CAAZ;;AAGA,YAAI,CAACJ,GAAL,EAAU;AACRX,UAAAA,MAAM,CAAC;AACLK,YAAAA,KAAK,EAAE,SADF;AAELW,YAAAA,YAAY,EAAE;AAFT,WAAD,CAAN;AAIA,iBAAO,IAAP;AACD;;AAED,YAAMC,UAAU,GAAGC,UAAU,CAACP,GAAG,CAACQ,WAAL,CAAV,GAA8B,GAAjD;AACA,YAAMC,OAAO,GAAGF,UAAU,CAACP,GAAG,CAACS,OAAL,CAAV,GAA0B,GAA1C;AACA,YAAMC,uBAAuB,GAAG,yCAA2BX,SAA3B,CAAhC;AACA,YAAMY,oBAAoB,GACxB,CAACZ,SAAS,CAACa,WAAV,IAAyB,CAA1B,IACCN,UAAU,GAAGI,uBAAd,GAAyC,GAF3C;AAGA,YAAMG,SAAS,GAAGF,oBAAoB,GAAGF,OAAzC;AACA,eAAO;AACLN,UAAAA,IAAI,EAAEH,GAAG,CAACG,IADL;AAELM,UAAAA,OAAO,EAAPA,OAFK;AAGLH,UAAAA,UAAU,EAAEC,UAAU,CAACP,GAAG,CAACQ,WAAL,CAAV,GAA8B,GAHrC;AAILM,UAAAA,kBAAkB,EAAG,QAAQH,oBAAT,GAAiCL,UAJhD;AAKLO,UAAAA,SAAS,EAAEA,SAAS,GAAG,CAAZ,GAAgB,IAAhB,GAAuBA,SAL7B;AAMLE,UAAAA,kBAAkB,EAAEf,GAAG,CAACQ,WAAJ,GAChBQ,IAAI,CAACC,IAAL,CAAW,MAAMjB,GAAG,CAACS,OAAX,GAAsBT,GAAG,CAACQ,WAApC,CADgB,GAEhB;AARC,SAAP;AAUD,OA7BqB,CAAtB;;AA8BApB,MAAAA,OAAO,CAACQ,aAAD,CAAP;AACD,KArCH,EAsCE,UAAAsB,GAAG;AAAA,aAAI7B,MAAM,CAAC6B,GAAD,CAAV;AAAA,KAtCL;AAwCD,GAzCM,CAAP;AA0CD;;eAEcjC,Q","sourcesContent":["import { loadPotData, getMonthsElapsedPercentage } from './helpers';\nimport POT_CONFIGS from './potConfigs';\n\nfunction loadPots(req) {\n  return new Promise((resolve, reject) => {\n    loadPotData(req.body.password).then(\n      potData => {\n        if (potData.error || potData.warning) {\n          resolve(potData);\n          return;\n        }\n        const processedData = POT_CONFIGS.map(potConfig => {\n          const pot = potData.filter(\n            p => p.name === potConfig.name && !p.deleted,\n          )[0];\n          if (!pot) {\n            reject({\n              error: 'unknown',\n              errorMessage: 'An unknown error occured',\n            });\n            return null;\n          }\n\n          const goalAmount = parseFloat(pot.goal_amount) / 100;\n          const balance = parseFloat(pot.balance) / 100;\n          const monthsElapsedPercentage = getMonthsElapsedPercentage(potConfig);\n          const expectedSavingsSoFar =\n            (potConfig.startAmount || 0) +\n            (goalAmount * monthsElapsedPercentage) / 100;\n          const shortfall = expectedSavingsSoFar - balance;\n          return {\n            name: pot.name,\n            balance,\n            goalAmount: parseFloat(pot.goal_amount) / 100,\n            percentageExpected: (100.0 * expectedSavingsSoFar) / goalAmount,\n            shortfall: shortfall < 5 ? null : shortfall,\n            percentageComplete: pot.goal_amount\n              ? Math.ceil((100 * pot.balance) / pot.goal_amount)\n              : 100,\n          };\n        });\n        resolve(processedData);\n      },\n      err => reject(err),\n    );\n  });\n}\n\nexport default loadPots;\n"],"file":"loadPots.js"}