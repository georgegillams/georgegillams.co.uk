{"version":3,"sources":["../../../../../server/api/actions/monzo/loadLatestTransactions.js"],"names":["loadLatestTransactions","req","Promise","resolve","reject","body","password","then","authResult","error","warning","potData","method","headers","Authorization","accessToken","key","res","json","accountData","accountID","accounts","find","a","type","id","params","URLSearchParams","append","potConfigsAnnotated","POT_CONFIGS","map","pc","pot","p","name","deleted","potId","toString","transactionData","potTransfers","transactions","filter","t","potOfInterest","forEach","metadata","pot_id","scheme","reverse","potName","amount","created","potWithdrawals","pt","potDeposits","processedData","matchingWithdrawal","pw","matchingDeposit","lastDeposit","lastWithdrawal","err"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;;;;;AAEA,SAASA,sBAAT,CAAgCC,GAAhC,EAAqC;AACnC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,4BAAUH,GAAG,CAACI,IAAJ,CAASC,QAAnB,EAA6BC,IAA7B,CACE,UAAAC,UAAU,EAAI;AACZ,UAAIA,UAAU,CAACC,KAAX,IAAoBD,UAAU,CAACE,OAAnC,EAA4C;AAC1CP,QAAAA,OAAO,CAACK,UAAD,CAAP;AACA;AACD;;AACD,gCAAYP,GAAG,CAACI,IAAJ,CAASC,QAArB,EAA+BC,IAA/B,CACE,UAAAI,OAAO,EAAI;AACT,YAAIA,OAAO,CAACF,KAAR,IAAiBE,OAAO,CAACD,OAA7B,EAAsC;AACpCP,UAAAA,OAAO,CAACQ,OAAD,CAAP;AACA;AACD;;AAED,mCAAM,gCAAN,EAAwC;AACtCC,UAAAA,MAAM,EAAE,KAD8B;AAEtCC,UAAAA,OAAO,EAAE;AACPC,YAAAA,aAAa,mBAAYN,UAAU,CAACO,WAAX,CAAuBC,GAAnC;AADN;AAF6B,SAAxC,EAMGT,IANH,CAMQ,UAAAU,GAAG;AAAA,iBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,SANX,EAOGX,IAPH,CAQI,UAAAY,WAAW,EAAI;AACb,cAAMC,SAAS,GAAGD,WAAW,CAACE,QAAZ,CAAqBC,IAArB,CAChB,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,IAAF,KAAW,WAAf;AAAA,WADe,EAEhBC,EAFF;AAIA,cAAMC,MAAM,GAAG,IAAIC,oBAAJ,EAAf;AACAD,UAAAA,MAAM,CAACE,MAAP,CAAc,YAAd,EAA4BR,SAA5B;;AAEA,cAAMS,mBAAmB,GAAGC,uBAAYC,GAAZ,CAAgB,UAAAC,EAAE,EAAI;AAChD,gBAAMC,GAAG,GAAGtB,OAAO,CAACW,IAAR,CACV,UAAAY,CAAC;AAAA,qBAAIA,CAAC,CAACC,IAAF,KAAWH,EAAE,CAACG,IAAd,IAAsB,CAACD,CAAC,CAACE,OAA7B;AAAA,aADS,CAAZ;;AAGA,gBAAI,CAACH,GAAL,EAAU;AACR,qBAAOD,EAAP;AACD;;AACD,gBAAMK,KAAK,GAAGJ,GAAG,CAACR,EAAlB;AACA,qCACKO,EADL;AAEEK,cAAAA,KAAK,EAALA;AAFF;AAID,WAZ2B,CAA5B;;AAaA,kFACwCX,MAAM,CAACY,QAAP,EADxC,GAEE;AACE1B,YAAAA,MAAM,EAAE,KADV;AAEEC,YAAAA,OAAO,EAAE;AACPC,cAAAA,aAAa,mBAAYN,UAAU,CAACO,WAAX,CAAuBC,GAAnC;AADN;AAFX,WAFF,EASGT,IATH,CASQ,UAAAU,GAAG;AAAA,mBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,WATX,EAUGX,IAVH,CAWI,UAAAgC,eAAe,EAAI;AACjB,gBAAIC,YAAY,GAAG,EAAnB;;AACA,gBACED,eAAe,IACfA,eAAe,CAACE,YADhB,IAEAF,eAAe,CAACE,YAAhB,CAA6BC,MAH/B,EAIE;AACAF,cAAAA,YAAY,GAAGD,eAAe,CAACE,YAAhB,CAA6BC,MAA7B,CACb,UAAAC,CAAC,EAAI;AACH,oBAAIC,aAAa,GAAG,KAApB;AACAf,gBAAAA,mBAAmB,CAACgB,OAApB,CAA4B,UAAAb,EAAE,EAAI;AAChC,sBAAIA,EAAE,CAACK,KAAH,KAAaM,CAAC,CAACG,QAAF,CAAWC,MAA5B,EAAoC;AAClCH,oBAAAA,aAAa,GAAG,IAAhB;AACD;AACF,iBAJD;AAKA,uBACED,CAAC,CAACK,MAAF,KAAa,eAAb,IAAgCJ,aADlC;AAGD,eAXY,CAAf;AAaAJ,cAAAA,YAAY,GAAGA,YAAY,CAACS,OAAb,GAAuBlB,GAAvB,CAA2B,UAAAG,CAAC,EAAI;AAC7C,oBAAMgB,OAAO,GAAGrB,mBAAmB,CAACP,IAApB,CACd,UAAAU,EAAE;AAAA,yBAAIA,EAAE,CAACK,KAAH,KAAaH,CAAC,CAACY,QAAF,CAAWC,MAA5B;AAAA,iBADY,EAEdZ,IAFF;AAGA,uBAAO;AACLgB,kBAAAA,MAAM,EAAEjB,CAAC,CAACiB,MADL;AAELD,kBAAAA,OAAO,EAAPA,OAFK;AAGLE,kBAAAA,OAAO,EAAElB,CAAC,CAACkB;AAHN,iBAAP;AAKD,eATc,CAAf;AAUD;;AACD,gBAAMC,cAAc,GAAGb,YAAY,CAACE,MAAb,CACrB,UAAAY,EAAE;AAAA,qBAAIA,EAAE,CAACH,MAAH,GAAY,CAAhB;AAAA,aADmB,CAAvB;AAGA,gBAAMI,WAAW,GAAGf,YAAY,CAACE,MAAb,CAClB,UAAAY,EAAE;AAAA,qBAAIA,EAAE,CAACH,MAAH,GAAY,CAAhB;AAAA,aADgB,CAApB;;AAGA,gBAAMK,aAAa,GAAG1B,uBAAYC,GAAZ,CAAgB,UAAAC,EAAE,EAAI;AAC1C,kBAAMyB,kBAAkB,GAAGJ,cAAc,CAAC/B,IAAf,CACzB,UAAAoC,EAAE;AAAA,uBAAIA,EAAE,CAACR,OAAH,KAAelB,EAAE,CAACG,IAAtB;AAAA,eADuB,CAA3B;AAGA,kBAAMwB,eAAe,GAAGJ,WAAW,CAACjC,IAAZ,CACtB,UAAAoC,EAAE;AAAA,uBAAIA,EAAE,CAACR,OAAH,KAAelB,EAAE,CAACG,IAAtB;AAAA,eADoB,CAAxB;AAGA,qBAAO;AACLA,gBAAAA,IAAI,EAAEH,EAAE,CAACG,IADJ;AAELyB,gBAAAA,WAAW,EAAE,gCAAkBD,eAAlB,CAFR;AAGLE,gBAAAA,cAAc,EAAE,gCACdJ,kBADc;AAHX,eAAP;AAOD,aAdqB,CAAtB;;AAeAtD,YAAAA,OAAO,CAACqD,aAAD,CAAP;AACD,WAhEL,EAiEI,UAAAM,GAAG;AAAA,mBAAI1D,MAAM,CAAC0D,GAAD,CAAV;AAAA,WAjEP;AAmED,SAhGL,EAiGI,UAAAA,GAAG;AAAA,iBAAI1D,MAAM,CAAC0D,GAAD,CAAV;AAAA,SAjGP;AAmGD,OA1GH,EA2GE,UAAAA,GAAG;AAAA,eAAI1D,MAAM,CAAC0D,GAAD,CAAV;AAAA,OA3GL;AA6GD,KAnHH,EAoHE,UAAAA,GAAG;AAAA,aAAI1D,MAAM,CAAC0D,GAAD,CAAV;AAAA,KApHL;AAsHD,GAvHM,CAAP;AAwHD;;eAEc9D,sB","sourcesContent":["import { URLSearchParams } from 'url';\n\nimport fetch from 'node-fetch';\n\nimport { authMonzo, loadPotData, formatTransaction } from './helpers';\nimport POT_CONFIGS from './potConfigs';\n\nfunction loadLatestTransactions(req) {\n  return new Promise((resolve, reject) => {\n    authMonzo(req.body.password).then(\n      authResult => {\n        if (authResult.error || authResult.warning) {\n          resolve(authResult);\n          return;\n        }\n        loadPotData(req.body.password).then(\n          potData => {\n            if (potData.error || potData.warning) {\n              resolve(potData);\n              return;\n            }\n\n            fetch('https://api.monzo.com/accounts', {\n              method: 'get',\n              headers: {\n                Authorization: `Bearer ${authResult.accessToken.key}`,\n              },\n            })\n              .then(res => res.json())\n              .then(\n                accountData => {\n                  const accountID = accountData.accounts.find(\n                    a => a.type === 'uk_retail',\n                  ).id;\n\n                  const params = new URLSearchParams();\n                  params.append('account_id', accountID);\n\n                  const potConfigsAnnotated = POT_CONFIGS.map(pc => {\n                    const pot = potData.find(\n                      p => p.name === pc.name && !p.deleted,\n                    );\n                    if (!pot) {\n                      return pc;\n                    }\n                    const potId = pot.id;\n                    return {\n                      ...pc,\n                      potId,\n                    };\n                  });\n                  fetch(\n                    `https://api.monzo.com/transactions?${params.toString()}`,\n                    {\n                      method: 'GET',\n                      headers: {\n                        Authorization: `Bearer ${authResult.accessToken.key}`,\n                      },\n                    },\n                  )\n                    .then(res => res.json())\n                    .then(\n                      transactionData => {\n                        let potTransfers = [];\n                        if (\n                          transactionData &&\n                          transactionData.transactions &&\n                          transactionData.transactions.filter\n                        ) {\n                          potTransfers = transactionData.transactions.filter(\n                            t => {\n                              let potOfInterest = false;\n                              potConfigsAnnotated.forEach(pc => {\n                                if (pc.potId === t.metadata.pot_id) {\n                                  potOfInterest = true;\n                                }\n                              });\n                              return (\n                                t.scheme === 'uk_retail_pot' && potOfInterest\n                              );\n                            },\n                          );\n                          potTransfers = potTransfers.reverse().map(p => {\n                            const potName = potConfigsAnnotated.find(\n                              pc => pc.potId === p.metadata.pot_id,\n                            ).name;\n                            return {\n                              amount: p.amount,\n                              potName,\n                              created: p.created,\n                            };\n                          });\n                        }\n                        const potWithdrawals = potTransfers.filter(\n                          pt => pt.amount > 0,\n                        );\n                        const potDeposits = potTransfers.filter(\n                          pt => pt.amount < 0,\n                        );\n                        const processedData = POT_CONFIGS.map(pc => {\n                          const matchingWithdrawal = potWithdrawals.find(\n                            pw => pw.potName === pc.name,\n                          );\n                          const matchingDeposit = potDeposits.find(\n                            pw => pw.potName === pc.name,\n                          );\n                          return {\n                            name: pc.name,\n                            lastDeposit: formatTransaction(matchingDeposit),\n                            lastWithdrawal: formatTransaction(\n                              matchingWithdrawal,\n                            ),\n                          };\n                        });\n                        resolve(processedData);\n                      },\n                      err => reject(err),\n                    );\n                },\n                err => reject(err),\n              );\n          },\n          err => reject(err),\n        );\n      },\n      err => reject(err),\n    );\n  });\n}\n\nexport default loadLatestTransactions;\n"],"file":"loadLatestTransactions.js"}