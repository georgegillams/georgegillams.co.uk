{"version":3,"sources":["../../../../../server/api/actions/monzo/helpers.js"],"names":["formatTransaction","transaction","amount","Math","abs","time","created","getMonthsElapsedPercentage","potConfig","monthly","config","POT_CONFIGS","filter","p","name","result","diff","startDate","min","authMonzo","password","Promise","resolve","reject","redisKey","resolveIfNotFound","sortKey","then","accessToken","accessPassword","process","env","MONZO_ACCESS_PASSWORD","error","errorMessage","method","headers","Authorization","key","res","json","data","pots","loadPotData","authResult","warning","err"],"mappings":"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","sourcesContent":["import safeCompare from 'safe-compare';\nimport fetch from 'node-fetch';\nimport moment from 'moment';\n\nimport { datumLoadSingle } from '../../actions/datum';\nimport { getTimeDifference } from 'helpers/time';\n\nimport POT_CONFIGS from './potConfigs';\n\nfunction formatTransaction(transaction) {\n  if (!transaction) {\n    return null;\n  }\n\n  return {\n    amount: Math.abs(transaction.amount),\n    time: getTimeDifference(transaction.created),\n  };\n}\n\nfunction getMonthsElapsedPercentage(potConfig) {\n  if (potConfig.monthly) {\n    return 0;\n  }\n\n  const config = POT_CONFIGS.filter(p => p.name === potConfig.name)[0];\n\n  const result = moment().diff(config.startDate, 'months');\n  return Math.min(100, (result * 100) / 12);\n}\n\nfunction authMonzo(password) {\n  return new Promise((resolve, reject) => {\n    datumLoadSingle({\n      redisKey: 'monzoApiKeys',\n      resolveIfNotFound: true,\n      sortKey: 'lastUpdatedTimestamp',\n    }).then(accessToken => {\n      const accessPassword = process.env.MONZO_ACCESS_PASSWORD;\n\n      if (!accessToken) {\n        reject({\n          error: 'auth',\n          errorMessage: 'No access token configured',\n        });\n        return;\n      }\n\n      if (!password || !safeCompare(password, accessPassword)) {\n        reject({\n          error: 'auth',\n          errorMessage: 'Access password incorrect.',\n        });\n        return;\n      }\n\n      fetch('https://api.monzo.com/pots', {\n        method: 'get',\n        headers: {\n          Authorization: `Bearer ${accessToken.key}`,\n        },\n      })\n        .then(res => res.json())\n        .then(data => {\n          if (!data || !data.pots) {\n            resolve({\n              error:\n                'The Monzo token has expired. Tell George to generate a new one.',\n            });\n            return;\n          }\n          resolve({ accessToken });\n        });\n    });\n  });\n}\n\nfunction loadPotData(password) {\n  return new Promise((resolve, reject) => {\n    authMonzo(password).then(\n      authResult => {\n        if (authResult.error || authResult.warning) {\n          resolve(authResult);\n          return;\n        }\n\n        fetch('https://api.monzo.com/pots', {\n          method: 'get',\n          headers: {\n            Authorization: `Bearer ${authResult.accessToken.key}`,\n          },\n        })\n          .then(res => res.json())\n          .then(data => {\n            if (!data || !data.pots) {\n              reject({\n                error: 'auth',\n                errorMessage:\n                  'The Monzo token has expired. Tell George to generate a new one.',\n              });\n              return;\n            }\n            resolve(data.pots);\n          });\n      },\n      err => reject(err),\n    );\n  });\n}\n\nexport default authMonzo;\nexport {\n  loadPotData,\n  getMonthsElapsedPercentage,\n  authMonzo,\n  formatTransaction,\n};\n"],"file":"helpers.js"}