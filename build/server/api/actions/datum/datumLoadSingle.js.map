{"version":3,"sources":["../../../../../server/api/actions/datum/datumLoadSingle.js"],"names":["notFound","settings","resolve","reject","resolveIfNotFound","undefined","RESOURCE_NOT_FOUND","datumLoadSingle","Promise","redis","lrange","redisKey","err","reply","orderedReply","sortKey","inc","length","value","JSON","parse","filter","includeDeleted","deleted"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEA,SAASA,QAAT,CAAkBC,QAAlB,EAA4BC,OAA5B,EAAqCC,MAArC,EAA6C;AAC3C,MAAIF,QAAQ,CAACG,iBAAb,EAAgC;AAC9BF,IAAAA,OAAO,CAACG,SAAD,CAAP;AACD,GAFD,MAEO;AACLF,IAAAA,MAAM,CAACG,6BAAD,CAAN;AACD;AACF;;AAEc,SAASC,eAAT,CAAyBN,QAAzB,EAAmC;AAChD;AACA,SAAO,IAAIO,OAAJ,CAAY,UAACN,OAAD,EAAUC,MAAV,EAAqB;AACtCM,sBAAMC,MAAN,CAAaT,QAAQ,CAACU,QAAtB,EAAgC,CAAhC,EAAmC,CAAC,CAApC,EAAuC,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACrD,UAAIC,YAAY,GAAGD,KAAnB;;AACA,UAAIZ,QAAQ,CAACc,OAAb,EAAsB;AACpBD,QAAAA,YAAY,GAAG,yBAAQ,wBAAOA,YAAP,EAAqB,CAACb,QAAQ,CAACc,OAAV,CAArB,CAAR,CAAf;AACD;;AACD,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,YAAY,CAACG,MAArC,EAA6CD,GAAG,IAAI,CAApD,EAAuD;AACrD,YAAME,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWN,YAAY,CAACE,GAAD,CAAvB,CAAd;;AACA,YAAI,CAACf,QAAQ,CAACoB,MAAV,IAAoBpB,QAAQ,CAACoB,MAAT,CAAgBH,KAAhB,CAAxB,EAAgD;AAC9C,cAAIjB,QAAQ,CAACqB,cAAT,IAA2B,CAACJ,KAAK,CAACK,OAAtC,EAA+C;AAC7CrB,YAAAA,OAAO,CAACgB,KAAD,CAAP;AACA;AACD;AACF;AACF;;AACDlB,MAAAA,QAAQ,CAACC,QAAD,EAAWC,OAAX,EAAoBC,MAApB,CAAR;AACD,KAfD;AAgBD,GAjBM,CAAP;AAkBD","sourcesContent":["import sortBy from 'lodash/sortBy';\nimport reverse from 'lodash/reverse';\n\nimport redis from 'utils/redis';\nimport { RESOURCE_NOT_FOUND } from 'helpers/constants';\n\nfunction notFound(settings, resolve, reject) {\n  if (settings.resolveIfNotFound) {\n    resolve(undefined);\n  } else {\n    reject(RESOURCE_NOT_FOUND);\n  }\n}\n\nexport default function datumLoadSingle(settings) {\n  // load(req) {\n  return new Promise((resolve, reject) => {\n    redis.lrange(settings.redisKey, 0, -1, (err, reply) => {\n      let orderedReply = reply;\n      if (settings.sortKey) {\n        orderedReply = reverse(sortBy(orderedReply, [settings.sortKey]));\n      }\n      for (let inc = 0; inc < orderedReply.length; inc += 1) {\n        const value = JSON.parse(orderedReply[inc]);\n        if (!settings.filter || settings.filter(value)) {\n          if (settings.includeDeleted || !value.deleted) {\n            resolve(value);\n            return;\n          }\n        }\n      }\n      notFound(settings, resolve, reject);\n    });\n  });\n}\n"],"file":"datumLoadSingle.js"}