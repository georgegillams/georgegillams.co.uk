{"version":3,"sources":["../../../../../server/api/actions/datum/datumCreate.js"],"names":["datumCreate","settings","req","Promise","resolve","reject","newValue","body","requestedId","id","Math","random","toString","substring","redisKey","then","existingData","entityWithSameId","existingValue","timestamp","Date","now","lastUpdatedTimestamp","authorId","user","undefined","redis","rpush","JSON","stringify","data","session","err"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAEe,SAASA,WAAT,CAAqBC,QAArB,EAA+BC,GAA/B,EAAoC;AACjD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,QAAQ,GAAGJ,GAAG,CAACK,IAArB;AACA,QAAMC,WAAW,GAAGF,QAAQ,CAACE,WAA7B;AACAF,IAAAA,QAAQ,CAACG,EAAT,GAAcC,IAAI,CAACC,MAAL,GACXC,QADW,CACF,EADE,EAEXC,SAFW,CAED,CAFC,CAAd;AAIA,+BAAU;AAAEC,MAAAA,QAAQ,EAAEb,QAAQ,CAACa;AAArB,KAAV,EAA2CC,IAA3C,CAAgD,UAAAC,YAAY,EAAI;AAC9D,UAAIR,WAAJ,EAAiB;AAAA,oBAC6B,iBAC1CQ,YAD0C,EAE1CR,WAF0C,CAD7B;AAAA,YACQS,gBADR,SACPC,aADO;;AAKf,YAAI,CAACD,gBAAL,EAAuB;AACrBX,UAAAA,QAAQ,CAACG,EAAT,GAAcD,WAAd;AACD;AACF;;AAEDF,MAAAA,QAAQ,CAACa,SAAT,GAAqBC,IAAI,CAACC,GAAL,EAArB;AACAf,MAAAA,QAAQ,CAACgB,oBAAT,GAAgChB,QAAQ,CAACa,SAAzC;AACAb,MAAAA,QAAQ,CAACiB,QAAT,GAAoBtB,QAAQ,CAACuB,IAAT,GAAgBvB,QAAQ,CAACuB,IAAT,CAAcf,EAA9B,GAAmCgB,SAAvD,CAb8D,CAc9D;;AACAC,wBAAMC,KAAN,CAAY,CAAC1B,QAAQ,CAACa,QAAV,EAAoBc,IAAI,CAACC,SAAL,CAAevB,QAAf,CAApB,CAAZ;;AACA,UACEL,QAAQ,CAACa,QAAT,KAAsB,UAAtB,IACAb,QAAQ,CAACa,QAAT,KAAsB,gBAFxB,EAGE;AACA;AACD;;AACD,iCAAUZ,GAAV,EAAea,IAAf,CACE,UAAAe,IAAI,EAAI;AACN,YAAI5B,GAAG,CAAC6B,OAAR,EAAiB;AACf7B,UAAAA,GAAG,CAAC6B,OAAJ,CAAY9B,QAAQ,CAACa,QAArB,IAAiCgB,IAAjC;AACD;;AACD1B,QAAAA,OAAO,CAACE,QAAD,CAAP;AACD,OANH,EAOE,UAAA0B,GAAG,EAAI;AACL3B,QAAAA,MAAM,CAAC2B,GAAD,CAAN;AACD,OATH;AAWD,KAjCD;AAkCD,GAzCM,CAAP;AA0CD","sourcesContent":["import datumLoad from './datumLoad';\n\nimport redis from 'utils/redis';\nimport { find } from 'utils/find';\nimport setContentLastUpdatedTimestamp from 'utils/setContentLastUpdatedTimestamp';\n\nexport default function datumCreate(settings, req) {\n  return new Promise((resolve, reject) => {\n    const newValue = req.body;\n    const requestedId = newValue.requestedId;\n    newValue.id = Math.random()\n      .toString(36)\n      .substring(7);\n\n    datumLoad({ redisKey: settings.redisKey }).then(existingData => {\n      if (requestedId) {\n        const { existingValue: entityWithSameId } = find(\n          existingData,\n          requestedId,\n        );\n        if (!entityWithSameId) {\n          newValue.id = requestedId;\n        }\n      }\n\n      newValue.timestamp = Date.now();\n      newValue.lastUpdatedTimestamp = newValue.timestamp;\n      newValue.authorId = settings.user ? settings.user.id : undefined;\n      // Write to redis:\n      redis.rpush([settings.redisKey, JSON.stringify(newValue)]);\n      if (\n        settings.redisKey !== 'sessions' &&\n        settings.redisKey !== 'contentUpdates'\n      ) {\n        setContentLastUpdatedTimestamp();\n      }\n      datumLoad(req).then(\n        data => {\n          if (req.session) {\n            req.session[settings.redisKey] = data;\n          }\n          resolve(newValue);\n        },\n        err => {\n          reject(err);\n        },\n      );\n    });\n  });\n}\n"],"file":"datumCreate.js"}