{"version":3,"sources":["../../../../server/api/actions/loginmagiclink.js"],"names":["loginmagiclink","req","reqSecured","usersAllowedAttributes","Promise","resolve","reject","magicLinkKey","body","redisKey","then","magicLinkData","userData","magicLink","existingValue","userId","user","Date","now","expiry","getTime","error","errorMessage"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;AAEe,SAASA,cAAT,CAAwBC,GAAxB,EAA6B;AAC1C,MAAMC,UAAU,GAAG,2BAAUD,GAAV,EAAeE,kCAAf,CAAnB;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA,QAC9BC,YAD8B,GACbL,UAAU,CAACM,IADE,CAC9BD,YAD8B;AAEtC,0BAAU;AAAEE,MAAAA,QAAQ,EAAE;AAAZ,KAAV,EAAsCC,IAAtC,CAA2C,UAAAC,aAAa,EAAI;AAC1D,4BAAU;AAAEF,QAAAA,QAAQ,EAAE;AAAZ,OAAV,EAAiCC,IAAjC,CAAsC,UAAAE,QAAQ,EAAI;AAChD;AADgD,oBAEX,iBACnCD,aADmC,EAEnCJ,YAFmC,EAGnC,KAHmC,CAFW;AAAA,YAEzBM,SAFyB,SAExCC,aAFwC;;AAOhD,YAAID,SAAJ,EAAe;AAAA,uBACmB,iBAAKD,QAAL,EAAeC,SAAS,CAACE,MAAzB,CADnB;AAAA,cACUC,IADV,UACLF,aADK;;AAEb,cAAIG,IAAI,CAACC,GAAL,KAAa,IAAID,IAAJ,CAASJ,SAAS,CAACM,MAAnB,EAA2BC,OAA3B,EAAjB,EAAuD;AACrD;AACAP,YAAAA,SAAS,CAACM,MAAV,GAAmB,CAAnB;AACA,oCAAY;AAAEV,cAAAA,QAAQ,EAAE;AAAZ,aAAZ,EAAwC;AAAED,cAAAA,IAAI,EAAEK;AAAR,aAAxC;AACAR,YAAAA,OAAO,CAAC,uBAAUH,UAAV,EAAsBc,IAAtB,CAAD,CAAP;AACD,WALD,MAKO;AACLV,YAAAA,MAAM,CAAC;AACLe,cAAAA,KAAK,EAAE,aADF;AAELC,cAAAA,YAAY,EAAE;AAFT,aAAD,CAAN;AAID;AACF,SAbD,MAaO;AACLhB,UAAAA,MAAM,CAAC;AAAEe,YAAAA,KAAK,EAAE,aAAT;AAAwBC,YAAAA,YAAY,EAAE;AAAtC,WAAD,CAAN;AACD;AACF,OAvBD;AAwBD,KAzBD;AA0BD,GA5BM,CAAP;AA6BD","sourcesContent":["import { datumLoad, datumUpdate } from '../actions/datum';\n\nimport usersAllowedAttributes from './users/usersAllowedAttributes';\n\nimport { find } from 'utils/find';\nimport reqSecure from 'utils/reqSecure';\nimport loginUser from 'utils/login';\n\nexport default function loginmagiclink(req) {\n  const reqSecured = reqSecure(req, usersAllowedAttributes);\n  return new Promise((resolve, reject) => {\n    const { magicLinkKey } = reqSecured.body;\n    datumLoad({ redisKey: 'magiclinks' }).then(magicLinkData => {\n      datumLoad({ redisKey: 'users' }).then(userData => {\n        // `find` uses `safeCompare` so it is safe to use for finding the entry that matches the key\n        const { existingValue: magicLink } = find(\n          magicLinkData,\n          magicLinkKey,\n          'key',\n        );\n        if (magicLink) {\n          const { existingValue: user } = find(userData, magicLink.userId);\n          if (Date.now() < new Date(magicLink.expiry).getTime()) {\n            // invalidate magic link (set expiry to 0)\n            magicLink.expiry = 0;\n            datumUpdate({ redisKey: 'magiclinks' }, { body: magicLink });\n            resolve(loginUser(reqSecured, user));\n          } else {\n            reject({\n              error: 'wrong-input',\n              errorMessage: 'Magic link has expired',\n            });\n          }\n        } else {\n          reject({ error: 'wrong-input', errorMessage: 'Invalid magic link' });\n        }\n      });\n    });\n  });\n}\n"],"file":"loginmagiclink.js"}