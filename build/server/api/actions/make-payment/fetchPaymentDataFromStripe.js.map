{"version":3,"sources":["../../../../../server/api/actions/make-payment/fetchPaymentDataFromStripe.js"],"names":["getPaymentIntent","paymentIntentId","Promise","resolve","reject","stripeInstance","paymentIntents","retrieve","fetchPaymentDataFromStripe","stripePayments","stripePaymentIntentPromises","map","sp","res","rej","then","paymentIntent","stripepayment","err","all","stripePaymentIntents"],"mappings":";;;;;;;;;;;AAAA;;AACA;;;;;;AAEA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,eAAe;AAAA,SACtC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B,QAAIH,eAAJ,EAAqB;AACnBE,MAAAA,OAAO,CAACE,mBAAeC,cAAf,CAA8BC,QAA9B,CAAuCN,eAAvC,CAAD,CAAP;AACD,KAFD,MAEO;AACLE,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GAND,CADsC;AAAA,CAAxC;;AASe,SAASK,0BAAT,CAAoCC,cAApC,EAAoD;AACjE,SAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMM,2BAA2B,GAAGD,cAAc,CAACE,GAAf,CAAmB,UAAAC,EAAE,EAAI;AAC3D,aAAO,IAAIV,OAAJ,CAAY,UAACW,GAAD,EAAMC,GAAN,EAAc;AAC/B;AACAd,QAAAA,gBAAgB,CAACY,EAAE,CAACX,eAAJ,CAAhB,CACGc,IADH,CACQ,UAAAC,aAAa,EAAI;AACrBH,UAAAA,GAAG,mBAAMG,aAAN;AAAqBC,YAAAA,aAAa,EAAEL;AAApC,aAAH;AACD,SAHH,WAIS,UAAAM,GAAG,EAAI;AACZJ,UAAAA,GAAG,CAAC,mCAAkBI,GAAlB,CAAD,CAAH;AACD,SANH;AAOD,OATM,CAAP;AAUD,KAXmC,CAApC;AAaAhB,IAAAA,OAAO,CAACiB,GAAR,CAAYT,2BAAZ,EACGK,IADH,CACQ,UAAAK,oBAAoB,EAAI;AAC5BjB,MAAAA,OAAO,CAACiB,oBAAD,CAAP;AACD,KAHH,WAIS,UAAAF,GAAG,EAAI;AACZd,MAAAA,MAAM,CAACc,GAAD,CAAN;AACD,KANH;AAOD,GArBM,CAAP;AAsBD","sourcesContent":["import stripeInstance from './stripe';\nimport formatStripeError from './formatStripeError';\n\nconst getPaymentIntent = paymentIntentId =>\n  new Promise((resolve, reject) => {\n    if (paymentIntentId) {\n      resolve(stripeInstance.paymentIntents.retrieve(paymentIntentId));\n    } else {\n      resolve(null);\n    }\n  });\n\nexport default function fetchPaymentDataFromStripe(stripePayments) {\n  return new Promise((resolve, reject) => {\n    const stripePaymentIntentPromises = stripePayments.map(sp => {\n      return new Promise((res, rej) => {\n        // get paid amount from stripe's server\n        getPaymentIntent(sp.paymentIntentId)\n          .then(paymentIntent => {\n            res({ ...paymentIntent, stripepayment: sp });\n          })\n          .catch(err => {\n            rej(formatStripeError(err));\n          });\n      });\n    });\n\n    Promise.all(stripePaymentIntentPromises)\n      .then(stripePaymentIntents => {\n        resolve(stripePaymentIntents);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n}\n"],"file":"fetchPaymentDataFromStripe.js"}