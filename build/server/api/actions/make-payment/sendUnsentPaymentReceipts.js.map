{"version":3,"sources":["../../../../../server/api/actions/make-payment/sendUnsentPaymentReceipts.js"],"names":["markStripePaymentEmailSent","id","newValue","Promise","resolve","reject","redisKey","filter","sp","then","stripepayment","body","emailSent","err","sendUnsentPaymentReceipts","payment","paymentId","stripePayments","paymentIntents","sendEmailPromises","forEach","pI","emailSentNewValue","charges","data","pICD","amount","push","all"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA,IAAMA,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,EAAD,EAAKC,QAAL;AAAA,SACjC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B,gCAAgB;AACdC,MAAAA,QAAQ,EAAE,gBADI;AAEdC,MAAAA,MAAM,EAAE,gBAAAC,EAAE;AAAA,eAAIA,EAAE,CAACP,EAAH,KAAUA,EAAd;AAAA;AAFI,KAAhB,EAIGQ,IAJH,CAIQ,UAAAC,aAAa,EAAI;AACrBN,MAAAA,OAAO,CACL,wBACE;AAAEE,QAAAA,QAAQ,EAAE;AAAZ,OADF,EAEE;AAAEK,QAAAA,IAAI,oBAAOD,aAAP;AAAsBE,UAAAA,SAAS,EAAEV;AAAjC;AAAN,OAFF,CADK,CAAP;AAMD,KAXH,WAYS,UAAAW,GAAG,EAAI;AACZR,MAAAA,MAAM,CAACQ,GAAD,CAAN;AACD,KAdH;AAeD,GAhBD,CADiC;AAAA,CAAnC;;AAmBe,SAASC,yBAAT,CAAmCC,OAAnC,EAA4C;AACzD,SAAO,IAAIZ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,0BAAU;AACRC,MAAAA,QAAQ,EAAE,gBADF;AAERC,MAAAA,MAAM,EAAE,gBAAAC,EAAE;AAAA,eAAIA,EAAE,CAACQ,SAAH,KAAiBD,OAAO,CAACd,EAAzB,IAA+B,CAACO,EAAE,CAACI,SAAvC;AAAA;AAFF,KAAV,EAIGH,IAJH,CAIQ,UAAAQ,cAAc,EAAI;AACtB,kDAA2BA,cAA3B,EACGR,IADH,CACQ,UAAAS,cAAc,EAAI;AACtB,YAAMC,iBAAiB,GAAG,EAA1B;AAEAD,QAAAA,cAAc,CAACE,OAAf,CAAuB,UAAAC,EAAE,EAAI;AAC3B,cAAIA,EAAJ,EAAQ;AACN,gBAAIC,iBAAiB,GAAG,IAAxB;AACAD,YAAAA,EAAE,CAACE,OAAH,CAAWC,IAAX,CAAgBJ,OAAhB,CAAwB,UAAAK,IAAI,EAAI;AAC9B,kBAAIA,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqB;AACnBJ,gBAAAA,iBAAiB,GAAG,2CAAwBP,OAAxB,EAAiCU,IAAjC,CAApB;AACD;AACF,aAJD;AAKAN,YAAAA,iBAAiB,CAACQ,IAAlB,CACE3B,0BAA0B,CACxBqB,EAAE,CAACX,aAAH,CAAiBT,EADO,EAExBqB,iBAFwB,CAD5B;AAMD;AACF,SAfD;AAiBAnB,QAAAA,OAAO,CAACyB,GAAR,CAAYT,iBAAZ,EACGV,IADH,CACQ,YAAM;AACVL,UAAAA,OAAO;AACR,SAHH,WAIS,UAAAS,GAAG,EAAI;AACZR,UAAAA,MAAM,CAACQ,GAAD,CAAN;AACD,SANH;AAOD,OA5BH,WA6BS,UAAAA,GAAG,EAAI;AACZR,QAAAA,MAAM,CAACQ,GAAD,CAAN;AACD,OA/BH;AAgCD,KArCH,WAsCS,UAAAA,GAAG,EAAI;AACZR,MAAAA,MAAM,CAACQ,GAAD,CAAN;AACD,KAxCH;AAyCD,GA1CM,CAAP;AA2CD","sourcesContent":["import { datumLoad, datumLoadSingle, datumUpdate } from '../datum';\nimport { sendPaymentReceiptEmail } from 'utils/emailHelpers';\nimport fetchPaymentDataFromStripe from './fetchPaymentDataFromStripe';\n\nconst markStripePaymentEmailSent = (id, newValue) =>\n  new Promise((resolve, reject) => {\n    datumLoadSingle({\n      redisKey: 'stripepayments',\n      filter: sp => sp.id === id,\n    })\n      .then(stripepayment => {\n        resolve(\n          datumUpdate(\n            { redisKey: 'stripepayments' },\n            { body: { ...stripepayment, emailSent: newValue } },\n          ),\n        );\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n\nexport default function sendUnsentPaymentReceipts(payment) {\n  return new Promise((resolve, reject) => {\n    datumLoad({\n      redisKey: 'stripepayments',\n      filter: sp => sp.paymentId === payment.id && !sp.emailSent,\n    })\n      .then(stripePayments => {\n        fetchPaymentDataFromStripe(stripePayments)\n          .then(paymentIntents => {\n            const sendEmailPromises = [];\n\n            paymentIntents.forEach(pI => {\n              if (pI) {\n                let emailSentNewValue = true;\n                pI.charges.data.forEach(pICD => {\n                  if (pICD.amount > 0) {\n                    emailSentNewValue = sendPaymentReceiptEmail(payment, pICD);\n                  }\n                });\n                sendEmailPromises.push(\n                  markStripePaymentEmailSent(\n                    pI.stripepayment.id,\n                    emailSentNewValue,\n                  ),\n                );\n              }\n            });\n\n            Promise.all(sendEmailPromises)\n              .then(() => {\n                resolve();\n              })\n              .catch(err => {\n                reject(err);\n              });\n          })\n          .catch(err => {\n            reject(err);\n          });\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n}\n"],"file":"sendUnsentPaymentReceipts.js"}