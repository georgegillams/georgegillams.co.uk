{"version":3,"sources":["../../../../../server/api/actions/make-payment/resendPaymentReceipt.js"],"names":["resendPaymentReceipt","req","reqSecured","stripePaymentsAllowedAttributes","Promise","resolve","reject","then","user","admin","userIdToResendTo","body","resendId","redisKey","userData","paymentData","paymentToResend","existingValue","existingUser","UNAUTHORISED_READ","err"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEe,SAASA,oBAAT,CAA8BC,GAA9B,EAAmC;AAChD;AACA,MAAMC,UAAU,GAAG,2BAAUD,GAAV,EAAeE,2CAAf,CAAnB;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,oCAAeJ,UAAf,EAA2BK,IAA3B,CACE,UAAAC,IAAI,EAAI;AACN,UAAIA,IAAI,IAAIA,IAAI,CAACC,KAAjB,EAAwB;AACtB,YAAMC,gBAAgB,GAAGR,UAAU,CAACS,IAAX,CAAgBC,QAAzC;AACA,8BAAU;AACRC,UAAAA,QAAQ,EAAE;AADF,SAAV,EAEGN,IAFH,CAEQ,UAAAO,QAAQ,EAAI;AAClB,gCAAU;AACRD,YAAAA,QAAQ,EAAE;AADF,WAAV,EAEGN,IAFH,CAEQ,UAAAQ,WAAW,EAAI;AAAA,wBACsB,iBACzCA,WADyC,EAEzCL,gBAFyC,EAGzC,UAHyC,CADtB;AAAA,gBACEM,eADF,SACbC,aADa;;AAAA,yBAMmB,iBACtCH,QADsC,EAEtCJ,gBAFsC,CANnB;AAAA,gBAMEQ,YANF,UAMbD,aANa;;AAUrB,gBAAIC,YAAY,IAAIF,eAApB,EAAqC;AACnC,yDAAwBE,YAAxB,EAAsCF,eAAtC;AACD;AACF,WAfD;AAgBD,SAnBD;AAoBD,OAtBD,MAsBO;AACLV,QAAAA,MAAM,CAACa,4BAAD,CAAN;AACD;AACF,KA3BH,EA4BE,UAAAC,GAAG;AAAA,aAAId,MAAM,CAACc,GAAD,CAAV;AAAA,KA5BL;AA8BD,GA/BM,CAAP;AAgCD","sourcesContent":["import { datumLoad } from '../datum';\nimport authentication from 'utils/authentication';\nimport { sendPaymentReceiptEmail } from 'utils/emailHelpers';\nimport reqSecure from 'utils/reqSecure';\nimport { find } from 'utils/find';\nimport { UNAUTHORISED_READ } from 'helpers/constants';\nimport stripePaymentsAllowedAttributes from './stripePaymentsAllowedAttributes';\n\nexport default function resendPaymentReceipt(req) {\n  // TODO rewrite to use payment email\n  const reqSecured = reqSecure(req, stripePaymentsAllowedAttributes);\n  return new Promise((resolve, reject) => {\n    authentication(reqSecured).then(\n      user => {\n        if (user && user.admin) {\n          const userIdToResendTo = reqSecured.body.resendId;\n          datumLoad({\n            redisKey: 'users',\n          }).then(userData => {\n            datumLoad({\n              redisKey: 'stripepayments',\n            }).then(paymentData => {\n              const { existingValue: paymentToResend } = find(\n                paymentData,\n                userIdToResendTo,\n                'authorId',\n              );\n              const { existingValue: existingUser } = find(\n                userData,\n                userIdToResendTo,\n              );\n              if (existingUser && paymentToResend) {\n                sendPaymentReceiptEmail(existingUser, paymentToResend);\n              }\n            });\n          });\n        } else {\n          reject(UNAUTHORISED_READ);\n        }\n      },\n      err => reject(err),\n    );\n  });\n}\n"],"file":"resendPaymentReceipt.js"}