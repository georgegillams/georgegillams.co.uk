{"version":3,"sources":["../../../../../server/api/actions/make-payment/getPaymentAndBalance.js"],"names":["getPaymentAndBalance","paymentId","Promise","resolve","reject","redisKey","filter","p","id","then","payment","sp","stripePayments","outstandingBalance","amount","stripePaymentIntents","forEach","paymentIntent","charges","data","d","paid","Math","round","err"],"mappings":";;;;;;;;;;;AAAA;;AACA;;;;;;AAEe,SAASA,oBAAT,CAA8BC,SAA9B,EAAyC;AACtD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,gCAAgB;AACdC,MAAAA,QAAQ,EAAE,UADI;AAEdC,MAAAA,MAAM,EAAE,gBAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,KAASP,SAAb;AAAA;AAFK,KAAhB,EAIGQ,IAJH,CAIQ,UAAAC,OAAO,EAAI;AACf,4BAAU;AACRL,QAAAA,QAAQ,EAAE,gBADF;AAERC,QAAAA,MAAM,EAAE,gBAAAK,EAAE;AAAA,iBAAIA,EAAE,CAACV,SAAH,KAAiBS,OAAO,CAACF,EAA7B;AAAA;AAFF,OAAV,EAIGC,IAJH,CAIQ,UAAAG,cAAc,EAAI;AACtB,YAAIC,kBAAkB,GAAGH,OAAO,CAACI,MAAjC;AACA,oDAA2BF,cAA3B,EACGH,IADH,CACQ,UAAAM,oBAAoB,EAAI;AAC5BA,UAAAA,oBAAoB,CAACC,OAArB,CAA6B,UAAAC,aAAa,EAAI;AAC5C,gBAAIA,aAAJ,EAAmB;AACjBA,cAAAA,aAAa,CAACC,OAAd,CAAsBC,IAAtB,CAA2BH,OAA3B,CAAmC,UAAAI,CAAC,EAAI;AACtC,oBAAIA,CAAC,CAACC,IAAN,EAAY;AACVR,kBAAAA,kBAAkB,IAAIO,CAAC,CAACN,MAAxB;AACD;AACF,eAJD;AAKD;AACF,WARD;AAUAX,UAAAA,OAAO,mBACFO,OADE;AAELI,YAAAA,MAAM,EAAEQ,IAAI,CAACC,KAAL,CAAWb,OAAO,CAACI,MAAnB,CAFH;AAGLD,YAAAA,kBAAkB,EAAES,IAAI,CAACC,KAAL,CAAWV,kBAAX;AAHf,aAAP;AAKD,SAjBH,WAkBS,UAAAW,GAAG,EAAI;AACZpB,UAAAA,MAAM,CAACoB,GAAD,CAAN;AACD,SApBH;AAqBD,OA3BH,WA4BS,UAAAA,GAAG,EAAI;AACZpB,QAAAA,MAAM,CAACoB,GAAD,CAAN;AACD,OA9BH;AA+BD,KApCH,WAqCS,UAAAA,GAAG,EAAI;AACZpB,MAAAA,MAAM,CAACoB,GAAD,CAAN;AACD,KAvCH;AAwCD,GAzCM,CAAP;AA0CD","sourcesContent":["import { datumLoad, datumLoadSingle } from '../datum';\nimport fetchPaymentDataFromStripe from './fetchPaymentDataFromStripe';\n\nexport default function getPaymentAndBalance(paymentId) {\n  return new Promise((resolve, reject) => {\n    datumLoadSingle({\n      redisKey: 'payments',\n      filter: p => p.id === paymentId,\n    })\n      .then(payment => {\n        datumLoad({\n          redisKey: 'stripepayments',\n          filter: sp => sp.paymentId === payment.id,\n        })\n          .then(stripePayments => {\n            let outstandingBalance = payment.amount;\n            fetchPaymentDataFromStripe(stripePayments)\n              .then(stripePaymentIntents => {\n                stripePaymentIntents.forEach(paymentIntent => {\n                  if (paymentIntent) {\n                    paymentIntent.charges.data.forEach(d => {\n                      if (d.paid) {\n                        outstandingBalance -= d.amount;\n                      }\n                    });\n                  }\n                });\n\n                resolve({\n                  ...payment,\n                  amount: Math.round(payment.amount),\n                  outstandingBalance: Math.round(outstandingBalance),\n                });\n              })\n              .catch(err => {\n                reject(err);\n              });\n          })\n          .catch(err => {\n            reject(err);\n          });\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n}\n"],"file":"getPaymentAndBalance.js"}