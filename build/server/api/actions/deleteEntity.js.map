{"version":3,"sources":["../../../../server/api/actions/deleteEntity.js"],"names":["deleteEntityAllowedAttributes","attribute","pattern","STRING_REGEX","ID_REGEX","deleteEntity","req","reqSecured","Promise","resolve","reject","then","user","admin","body","collectionName","id","redisKey","includeDeleted","collectionData","existingValue","existingValueIndex","deleted","console","log","redis","lrem","JSON","stringify","error","errorMessage","RESOURCE_NOT_FOUND","UNAUTHORISED_WRITE","err"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAEA,IAAMA,6BAA6B,GAAG,CACpC;AAAEC,EAAAA,SAAS,EAAE,gBAAb;AAA+BC,EAAAA,OAAO,EAAEC;AAAxC,CADoC,EAEpC;AAAEF,EAAAA,SAAS,EAAE,IAAb;AAAmBC,EAAAA,OAAO,EAAEE;AAA5B,CAFoC,CAAtC;;AAKe,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACxC,MAAMC,UAAU,GAAG,2BAAUD,GAAV,EAAeN,6BAAf,CAAnB;AACA,SAAO,IAAIQ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,oCAAeH,UAAf,EAA2BI,IAA3B,CACE,UAAAC,IAAI,EAAI;AACN,UAAIA,IAAI,IAAIA,IAAI,CAACC,KAAjB,EAAwB;AAAA,+BACSN,UAAU,CAACO,IADpB;AAAA,YACdC,cADc,oBACdA,cADc;AAAA,YACEC,EADF,oBACEA,EADF;AAEtB,8BAAU;AAAEC,UAAAA,QAAQ,EAAEF,cAAZ;AAA4BG,UAAAA,cAAc,EAAE;AAA5C,SAAV,EAA8DP,IAA9D,CACE,UAAAQ,cAAc,EAAI;AAAA,sBAC8B,iBAC5CA,cAD4C,EAE5CH,EAF4C,CAD9B;AAAA,cACRI,aADQ,SACRA,aADQ;AAAA,cACOC,kBADP,SACOA,kBADP;;AAKhB,cAAID,aAAJ,EAAmB;AACjB,gBAAIA,aAAa,CAACE,OAAlB,EAA2B;AACzBC,cAAAA,OAAO,CAACC,GAAR,gCAC0BJ,aAAa,CAACJ,EADxC,uBACuDK,kBADvD;AAGAZ,cAAAA,OAAO,CACLgB,kBAAMC,IAAN,CACEX,cADF,EAEE,CAFF,EAGEY,IAAI,CAACC,SAAL,CAAeR,aAAf,CAHF,CADK,CAAP;AAOA;AACD,aAZD,MAYO;AACLV,cAAAA,MAAM,CAAC;AACLmB,gBAAAA,KAAK,EAAE,aADF;AAELC,gBAAAA,YAAY,EACV;AAHG,eAAD,CAAN;AAKD;AACF,WApBD,MAoBO;AACLpB,YAAAA,MAAM,CAACqB,6BAAD,CAAN;AACD;AACF,SA7BH;AA+BD,OAjCD,MAiCO;AACLrB,QAAAA,MAAM,CAACsB,6BAAD,CAAN;AACD;AACF,KAtCH,EAuCE,UAAAC,GAAG;AAAA,aAAIvB,MAAM,CAACuB,GAAD,CAAV;AAAA,KAvCL;AAyCD,GA1CM,CAAP;AA2CD","sourcesContent":["import { datumLoad, datumUpdate } from '../actions/datum';\n\nimport { STRING_REGEX, ID_REGEX, RESOURCE_NOT_FOUND } from 'helpers/constants';\nimport redis from 'utils/redis';\nimport { find } from 'utils/find';\nimport { UNAUTHORISED_WRITE } from 'helpers/constants';\nimport authentication from 'utils/authentication';\nimport setContentLastUpdatedTimestamp from 'utils/setContentLastUpdatedTimestamp';\nimport reqSecure from 'utils/reqSecure';\n\nconst deleteEntityAllowedAttributes = [\n  { attribute: 'collectionName', pattern: STRING_REGEX },\n  { attribute: 'id', pattern: ID_REGEX },\n];\n\nexport default function deleteEntity(req) {\n  const reqSecured = reqSecure(req, deleteEntityAllowedAttributes);\n  return new Promise((resolve, reject) => {\n    authentication(reqSecured).then(\n      user => {\n        if (user && user.admin) {\n          const { collectionName, id } = reqSecured.body;\n          datumLoad({ redisKey: collectionName, includeDeleted: true }).then(\n            collectionData => {\n              const { existingValue, existingValueIndex } = find(\n                collectionData,\n                id,\n              );\n              if (existingValue) {\n                if (existingValue.deleted) {\n                  console.log(\n                    `Permanently removing ${existingValue.id} at index ${existingValueIndex}`,\n                  );\n                  resolve(\n                    redis.lrem(\n                      collectionName,\n                      1,\n                      JSON.stringify(existingValue),\n                    ),\n                  );\n                  setContentLastUpdatedTimestamp();\n                } else {\n                  reject({\n                    error: 'wrong-input',\n                    errorMessage:\n                      'Only deleted entities can be permanently removed.',\n                  });\n                }\n              } else {\n                reject(RESOURCE_NOT_FOUND);\n              }\n            },\n          );\n        } else {\n          reject(UNAUTHORISED_WRITE);\n        }\n      },\n      err => reject(err),\n    );\n  });\n}\n"],"file":"deleteEntity.js"}