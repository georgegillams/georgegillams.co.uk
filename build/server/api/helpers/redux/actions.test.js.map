{"version":3,"sources":["../../../../../server/api/helpers/redux/actions.test.js"],"names":["testActionDefinitions","MY_ACTION_NAME","attributes","MY_ACTION_NAME_SUCCESS","MY_ACTION_NAME_ERROR","test","done","actions","actionMethodNames","Object","keys","expect","length","toBe","toEqual","constants","populatedActions","undefined","calledArgs","dispatchMock","functionReturnedValue","push","testActions","actionOne","result","i","actionTwo","mappedActions"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\n// eslint-disable-next-line\nimport defineActions, { populateConstants, mapActions } from './actions.js';\n\nconst testActionDefinitions = [\n  { MY_ACTION_NAME: 'tbd', attributes: [] },\n  {\n    MY_ACTION_NAME_SUCCESS: 'tbd',\n    attributes: ['theFirstArgument', 'theSecondArgument'],\n  },\n  { MY_ACTION_NAME_ERROR: 'tbd', attributes: ['theFirstErrorArgument'] },\n];\n\ntest('correctly creates actions action definitions', done => {\n  const actions = defineActions(testActionDefinitions);\n\n  const actionMethodNames = Object.keys(actions);\n  expect(actionMethodNames.length).toBe(3);\n  expect(actionMethodNames[0]).toBe('myActionName');\n  expect(actionMethodNames[1]).toBe('myActionNameSuccess');\n  expect(actionMethodNames[2]).toBe('myActionNameError');\n\n  expect(typeof actions[actionMethodNames[0]]).toEqual('function');\n  expect(typeof actions[actionMethodNames[1]]).toEqual('function');\n  expect(typeof actions[actionMethodNames[2]]).toEqual('function');\n\n  done();\n});\n\ntest('correctly populates action definition constants', done => {\n  const constants = {\n    MY_ACTION_NAME: 'asdfhh',\n    MY_ACTION_NAME_SUCCESS: 'xcvbnm',\n    MY_ACTION_NAME_ERROR: 'ertyuio',\n  };\n  const populatedActions = populateConstants(testActionDefinitions, constants);\n\n  expect(populatedActions.length).toBe(3);\n  expect(populatedActions[0].MY_ACTION_NAME).toBe('asdfhh');\n  expect(populatedActions[0].MY_ACTION_NAME_SUCCESS).toBe(undefined);\n  expect(populatedActions[0].MY_ACTION_NAME_ERROR).toBe(undefined);\n\n  expect(populatedActions[1].MY_ACTION_NAME).toBe(undefined);\n  expect(populatedActions[1].MY_ACTION_NAME_SUCCESS).toBe('xcvbnm');\n  expect(populatedActions[1].MY_ACTION_NAME_ERROR).toBe(undefined);\n\n  expect(populatedActions[2].MY_ACTION_NAME).toBe(undefined);\n  expect(populatedActions[2].MY_ACTION_NAME_SUCCESS).toBe(undefined);\n  expect(populatedActions[2].MY_ACTION_NAME_ERROR).toBe('ertyuio');\n\n  done();\n});\n\ntest('correctly maps actions for prop dispatching', done => {\n  const calledArgs = [];\n  const dispatchMock = functionReturnedValue => {\n    calledArgs.push(functionReturnedValue);\n  };\n\n  const testActions = {\n    actionOne: (...args) => {\n      let result = 'action1';\n      for (let i = 0; i < args.length; i += 1) {\n        result += `_${args[i]}`;\n      }\n      return result;\n    },\n    actionTwo: (...args) => {\n      let result = 'action2';\n      for (let i = 0; i < args.length; i += 1) {\n        result += `_${args[i]}`;\n      }\n      return result;\n    },\n  };\n\n  const mappedActions = mapActions(dispatchMock, testActions);\n\n  const actionMethodNames = Object.keys(mappedActions);\n  expect(actionMethodNames.length).toBe(2);\n  expect(actionMethodNames[0]).toBe('actionOne');\n  expect(actionMethodNames[1]).toBe('actionTwo');\n  expect(calledArgs).toEqual([]);\n\n  mappedActions.actionOne('a', 'b');\n  expect(calledArgs).toEqual(['action1_a_b']);\n  mappedActions.actionTwo('c', 'd');\n  expect(calledArgs).toEqual(['action1_a_b', 'action2_c_d']);\n  done();\n});\n"],"file":"actions.test.js"}