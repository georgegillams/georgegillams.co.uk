{"version":3,"sources":["../../../../../server/api/helpers/redux/constants.test.js"],"names":["testActionDefinitions","MY_ACTION_NAME","attributes","MY_ACTION_NAME_SUCCESS","MY_ACTION_NAME_ERROR","test","done","constants","constantNames","Object","keys","expect","length","toBe","includes"],"mappings":"AAAA;AAEA;;;;;AACA;;AAKA,IAAMA,qBAAqB,GAAG,CAC5B;AAAEC,EAAAA,cAAc,EAAE,KAAlB;AAAyBC,EAAAA,UAAU,EAAE;AAArC,CAD4B,EAE5B;AACEC,EAAAA,sBAAsB,EAAE,KAD1B;AAEED,EAAAA,UAAU,EAAE,CAAC,kBAAD,EAAqB,mBAArB;AAFd,CAF4B,EAM5B;AAAEE,EAAAA,oBAAoB,EAAE,KAAxB;AAA+BF,EAAAA,UAAU,EAAE,CAAC,uBAAD;AAA3C,CAN4B,CAA9B;AASAG,IAAI,CAAC,0CAAD,EAA6C,UAAAC,IAAI,EAAI;AACvD,MAAMC,SAAS,GAAG,2BAChB,gBADgB,EAEhB,wBAFgB,EAGhB,sBAHgB,CAAlB;AAMA,MAAMC,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAYH,SAAZ,CAAtB;AACAI,EAAAA,MAAM,CAACH,aAAa,CAACI,MAAf,CAAN,CAA6BC,IAA7B,CAAkC,CAAlC;AAEAF,EAAAA,MAAM,CAACH,aAAa,CAAC,CAAD,CAAd,CAAN,CAAyBK,IAAzB,CAA8B,gBAA9B;AACAF,EAAAA,MAAM,CAACH,aAAa,CAAC,CAAD,CAAd,CAAN,CAAyBK,IAAzB,CAA8B,wBAA9B;AACAF,EAAAA,MAAM,CAACH,aAAa,CAAC,CAAD,CAAd,CAAN,CAAyBK,IAAzB,CAA8B,sBAA9B;AAEAF,EAAAA,MAAM,CAACJ,SAAS,CAACC,aAAa,CAAC,CAAD,CAAd,CAAT,CAA4BM,QAA5B,CAAqC,iBAArC,CAAD,CAAN,CAAgED,IAAhE,CAAqE,IAArE;AACAF,EAAAA,MAAM,CAACJ,SAAS,CAACC,aAAa,CAAC,CAAD,CAAd,CAAT,CAA4BM,QAA5B,CAAqC,yBAArC,CAAD,CAAN,CAAwED,IAAxE,CACE,IADF;AAGAF,EAAAA,MAAM,CAACJ,SAAS,CAACC,aAAa,CAAC,CAAD,CAAd,CAAT,CAA4BM,QAA5B,CAAqC,uBAArC,CAAD,CAAN,CAAsED,IAAtE,CACE,IADF;AAIAP,EAAAA,IAAI;AACL,CAvBG,CAAJ;AAyBAD,IAAI,CAAC,yDAAD,EAA4D,UAAAC,IAAI,EAAI;AACtE,MAAMC,SAAS,GAAG,oDAAoCP,qBAApC,CAAlB;AAEAW,EAAAA,MAAM,CAACJ,SAAS,CAACK,MAAX,CAAN,CAAyBC,IAAzB,CAA8B,CAA9B;AAEAF,EAAAA,MAAM,CAACJ,SAAS,CAAC,CAAD,CAAV,CAAN,CAAqBM,IAArB,CAA0B,gBAA1B;AACAF,EAAAA,MAAM,CAACJ,SAAS,CAAC,CAAD,CAAV,CAAN,CAAqBM,IAArB,CAA0B,wBAA1B;AACAF,EAAAA,MAAM,CAACJ,SAAS,CAAC,CAAD,CAAV,CAAN,CAAqBM,IAArB,CAA0B,sBAA1B;AAEAP,EAAAA,IAAI;AACL,CAVG,CAAJ","sourcesContent":["#!/usr/bin/env node\n\n// eslint-disable-next-line\nimport defineConstants, {\n  generateConstantValue,\n  inferConstantsFromActionDefinitions,\n} from './constants';\n\nconst testActionDefinitions = [\n  { MY_ACTION_NAME: 'tbd', attributes: [] },\n  {\n    MY_ACTION_NAME_SUCCESS: 'tbd',\n    attributes: ['theFirstArgument', 'theSecondArgument'],\n  },\n  { MY_ACTION_NAME_ERROR: 'tbd', attributes: ['theFirstErrorArgument'] },\n];\n\ntest('correctly creates constants from strings', done => {\n  const constants = defineConstants(\n    'MY_ACTION_NAME',\n    'MY_ACTION_NAME_SUCCESS',\n    'MY_ACTION_NAME_ERROR',\n  );\n\n  const constantNames = Object.keys(constants);\n  expect(constantNames.length).toBe(3);\n\n  expect(constantNames[0]).toBe('MY_ACTION_NAME');\n  expect(constantNames[1]).toBe('MY_ACTION_NAME_SUCCESS');\n  expect(constantNames[2]).toBe('MY_ACTION_NAME_ERROR');\n\n  expect(constants[constantNames[0]].includes('MY_ACTION_NAME-')).toBe(true);\n  expect(constants[constantNames[1]].includes('MY_ACTION_NAME_SUCCESS-')).toBe(\n    true,\n  );\n  expect(constants[constantNames[2]].includes('MY_ACTION_NAME_ERROR-')).toBe(\n    true,\n  );\n\n  done();\n});\n\ntest('correctly creates constant names from actionDefinitions', done => {\n  const constants = inferConstantsFromActionDefinitions(testActionDefinitions);\n\n  expect(constants.length).toBe(3);\n\n  expect(constants[0]).toBe('MY_ACTION_NAME');\n  expect(constants[1]).toBe('MY_ACTION_NAME_SUCCESS');\n  expect(constants[2]).toBe('MY_ACTION_NAME_ERROR');\n\n  done();\n});\n"],"file":"constants.test.js"}