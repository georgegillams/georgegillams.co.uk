{"version":3,"sources":["../../../../../server/api/helpers/redux/saga.js"],"names":["sagaHelper","requestURL","requestParams","registerErrorAction","registerSuccessAction","successMessage","postSuccessCallback","request","result","error","type","message","errorMessage","warning","warningMessage","COMMUNICATION_ERROR_MESSAGE"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;6BAEiBA,U;;AAAV,SAAUA,UAAV,CACLC,UADK,EAELC,aAFK,EAGLC,mBAHK,EAILC,qBAJK,EAKLC,cALK,EAMLC,mBANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASY,iBAAM,mBAAKC,mBAAL,EAAcN,UAAd,EAA0BC,aAA1B,CAAN;;AATZ;AASGM,UAAAA,MATH;;AAAA,eAUCA,MAAM,CAACC,KAVR;AAAA;AAAA;AAAA;;AAAA;AAWD,iBAAM,kBAAIN,mBAAmB,CAACK,MAAD,CAAvB,CAAN;;AAXC;AAAA;AAYD,iBAAM,kBAAI,0BAAY;AAAEE,YAAAA,IAAI,EAAE,OAAR;AAAiBC,YAAAA,OAAO,EAAEH,MAAM,CAACI;AAAjC,WAAZ,CAAJ,CAAN;;AAZC;AAAA;AAAA;;AAAA;AAAA,eAcGJ,MAAM,CAACK,OAdV;AAAA;AAAA;AAAA;;AAAA;AAeC,iBAAM,kBACJ,0BAAY;AAAEH,YAAAA,IAAI,EAAE,MAAR;AAAgBC,YAAAA,OAAO,EAAEH,MAAM,CAACM;AAAhC,WAAZ,CADI,CAAN;;AAfD;AAAA,eAmBGT,cAnBH;AAAA;AAAA;AAAA;;AAAA;AAoBC,iBAAM,kBAAI,0BAAYA,cAAZ,CAAJ,CAAN;;AApBD;AAAA;AAsBD,iBAAM,kBAAID,qBAAqB,CAACI,MAAD,CAAzB,CAAN;;AAtBC;AAAA,eAuBGF,mBAvBH;AAAA;AAAA;AAAA;;AAAA;AAwBC,iBAAMA,mBAAmB,EAAzB;;AAxBD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA4BH,iBAAM,kBAAIH,mBAAmB,aAAvB,CAAN;;AA5BG;AAAA;AA6BH,iBAAM,kBAAI,0BAAYY,sCAAZ,CAAJ,CAAN;;AA7BG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put } from 'redux-saga/effects';\nimport { pushMessage } from 'containers/RequestStatusWrapper/actions';\nimport request from 'utils/request';\nimport { COMMUNICATION_ERROR_MESSAGE } from 'helpers/constants';\n\nexport function* sagaHelper(\n  requestURL,\n  requestParams,\n  registerErrorAction,\n  registerSuccessAction,\n  successMessage,\n  postSuccessCallback,\n) {\n  try {\n    const result = yield call(request, requestURL, requestParams);\n    if (result.error) {\n      yield put(registerErrorAction(result));\n      yield put(pushMessage({ type: 'error', message: result.errorMessage }));\n    } else {\n      if (result.warning) {\n        yield put(\n          pushMessage({ type: 'warn', message: result.warningMessage }),\n        );\n      }\n      if (successMessage) {\n        yield put(pushMessage(successMessage));\n      }\n      yield put(registerSuccessAction(result));\n      if (postSuccessCallback) {\n        yield postSuccessCallback();\n      }\n    }\n  } catch (err) {\n    yield put(registerErrorAction(err));\n    yield put(pushMessage(COMMUNICATION_ERROR_MESSAGE));\n  }\n}\n"],"file":"saga.js"}