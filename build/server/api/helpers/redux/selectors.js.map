{"version":3,"sources":["../../../../../server/api/helpers/redux/selectors.js"],"names":["createSelectors","id","stateEntities","result","selectState","state","get","i","entity","selectorName","entitySelector","length","mapSelectors","selectors","selectorNames","Object","keys","includes","shortName","split"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,EAAD,EAAKC,aAAL,EAAuB;AAC7C,MAAMC,MAAM,GAAG,EAAf;;AACA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,GAAN,CAAUL,EAAV,CAAJ;AAAA,GAAzB;;AAF6C,6BAIpCM,CAJoC;AAK3C,QAAMC,MAAM,GAAGN,aAAa,CAACK,CAAD,CAA5B;AACA,QAAME,YAAY,GAAG,iDAAyBD,MAAzB,EAArB;;AAEA,QAAME,cAAc,GAAG,SAAjBA,cAAiB;AAAA,aACrB,8BACEN,WADF,EAEE,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACC,GAAN,CAAUE,MAAV,CAAJ;AAAA,OAFP,CADqB;AAAA,KAAvB;;AAKAL,IAAAA,MAAM,CAACM,YAAD,CAAN,GAAuBC,cAAvB;AAb2C;;AAI7C,OAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,aAAa,CAACS,MAAlC,EAA0CJ,CAAC,IAAI,CAA/C,EAAkD;AAAA,UAAzCA,CAAyC;AAUjD;;AACD,SAAOJ,MAAP;AACD,CAhBD;;;;AAkBA,IAAMS,YAAY,GAAG,SAAfA,YAAe,CAAAC,SAAS,EAAI;AAChC,MAAMV,MAAM,GAAG,EAAf;AACA,MAAMW,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAYH,SAAZ,CAAtB;;AAEA,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,aAAa,CAACH,MAAlC,EAA0CJ,CAAC,IAAI,CAA/C,EAAkD;AAChD,QAAIO,aAAa,CAACP,CAAD,CAAb,CAAiBU,QAAjB,CAA0B,YAA1B,CAAJ,EAA6C;AAC3C,UAAMC,SAAS,GAAG,2BAAUJ,aAAa,CAACP,CAAD,CAAb,CAAiBY,KAAjB,CAAuB,YAAvB,CAAV,CAAlB;AACAhB,MAAAA,MAAM,CAACe,SAAD,CAAN,GAAoBL,SAAS,CAACC,aAAa,CAACP,CAAD,CAAd,CAAT,EAApB;AACD;AACF;;AAED,SAAOJ,MAAP;AACD,CAZD;;;eAeeH,e","sourcesContent":["import camelCase from 'lodash/camelCase';\nimport { createSelector } from 'reselect';\n\nconst createSelectors = (id, stateEntities) => {\n  const result = {};\n  const selectState = state => state.get(id);\n\n  for (let i = 0; i < stateEntities.length; i += 1) {\n    const entity = stateEntities[i];\n    const selectorName = camelCase(`MAKE_SELECT_${entity}`);\n\n    const entitySelector = () =>\n      createSelector(\n        selectState,\n        state => state.get(entity),\n      );\n    result[selectorName] = entitySelector;\n  }\n  return result;\n};\n\nconst mapSelectors = selectors => {\n  const result = {};\n  const selectorNames = Object.keys(selectors);\n\n  for (let i = 0; i < selectorNames.length; i += 1) {\n    if (selectorNames[i].includes('makeSelect')) {\n      const shortName = camelCase(selectorNames[i].split('makeSelect'));\n      result[shortName] = selectors[selectorNames[i]]();\n    }\n  }\n\n  return result;\n};\n\nexport { mapSelectors, createSelectors };\nexport default createSelectors;\n"],"file":"selectors.js"}