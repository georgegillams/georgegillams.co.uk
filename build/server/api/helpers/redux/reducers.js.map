{"version":3,"sources":["../../../../../server/api/helpers/redux/reducers.js"],"names":["inferPropertiesFromInitialStateRecursive","s","result","_root","push","sNodes","nodes","forEach","node","nodeProperties","property","sEntries","entries","entry","nodeEntries","sEntry","entryResults","entryResult","inferPropertiesFromInitialState","getInitialState","reducer","undefined","createInitialState","actionDefinitions","initialStateObj","aD","stateMutations","Object","keys","k","createAppReducer","constants","initialState","appReducerFunc","state","action","actionDefinition","constantKey","constantValue","type","smKey","newValue","get","set"],"mappings":"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","sourcesContent":["const inferPropertiesFromInitialStateRecursive = (s, result = []) => {\n  if (s && s._root) {\n    return inferPropertiesFromInitialStateRecursive(s._root);\n  }\n\n  if (s && s[0] && typeof s[0] === 'string') {\n    result.push(s[0]);\n  }\n\n  if (!s) {\n    return result;\n  }\n\n  const sNodes = s.nodes;\n  if (sNodes && sNodes.forEach) {\n    sNodes.forEach(node => {\n      const nodeProperties = inferPropertiesFromInitialStateRecursive(node);\n      nodeProperties.forEach(property => {\n        result.push(property);\n      });\n    });\n  }\n\n  const sEntries = s.entries;\n  if (sEntries && sEntries.forEach) {\n    sEntries.forEach(entry => {\n      const nodeEntries = inferPropertiesFromInitialStateRecursive(entry);\n      nodeEntries.forEach(property => {\n        result.push(property);\n      });\n    });\n  }\n\n  const sEntry = s.entry;\n  if (sEntry) {\n    const entryResults = inferPropertiesFromInitialStateRecursive(sEntry);\n    entryResults.forEach(entryResult => {\n      result.push(entryResult);\n    });\n  }\n\n  return result;\n};\n\nconst inferPropertiesFromInitialState = s => {\n  if (!s || !s._root) {\n    return [];\n  }\n  return inferPropertiesFromInitialStateRecursive(s._root);\n};\n\nconst getInitialState = reducer => reducer(undefined, {});\n\n// TODO Write tests for this:\nconst createInitialState = actionDefinitions => {\n  const initialStateObj = {};\n  actionDefinitions.forEach(aD => {\n    if (!aD.stateMutations) {\n      return;\n    }\n    Object.keys(aD.stateMutations).forEach(k => {\n      initialStateObj[k] = null;\n    });\n  });\n  return initialStateObj;\n};\n\n// TODO Write tests for this:\nconst createAppReducer = (actionDefinitions, constants, initialState) => {\n  function appReducerFunc(state = initialState, action) {\n    // Work out which actionDefinition the `action.type` refers to.\n    let actionDefinition = null;\n    Object.keys(constants).forEach(constantKey => {\n      const constantValue = constants[constantKey];\n      if (constantValue === action.type) {\n        actionDefinitions.forEach(aD => {\n          if (Object.keys(aD)[0] === constantKey) {\n            actionDefinition = aD;\n          }\n        });\n      }\n    });\n\n    // For each stateMutator on the actionDefinition, call `state.set(...)`\n    if (actionDefinition && actionDefinition.stateMutations) {\n      const stateMutations = actionDefinition.stateMutations;\n      Object.keys(stateMutations).forEach(smKey => {\n        let newValue = stateMutations[smKey];\n        if (typeof newValue === 'function') {\n          newValue = newValue(action, state.get(smKey));\n        }\n        state = state.set(smKey, newValue);\n      });\n    }\n\n    // Return state\n    return state;\n  }\n  return appReducerFunc;\n};\n\nexport {\n  inferPropertiesFromInitialState,\n  getInitialState,\n  createInitialState,\n  createAppReducer,\n};\nexport default inferPropertiesFromInitialState;\n"],"file":"reducers.js"}