{"version":3,"sources":["../../../../../server/api/helpers/redux/selectors.test.js"],"names":["test","done","testEntities","selectors","selectorFunctionNames","Object","keys","expect","length","toBe","toEqual","mappedSelectors","mappedSelectorNames"],"mappings":"AAAA;AAEA;;;;;;;;;AACA;;AAEAA,IAAI,CAAC,iDAAD,EAAoD,UAAAC,IAAI,EAAI;AAC9D,MAAMC,YAAY,GAAG,CAAC,aAAD,EAAgB,aAAhB,CAArB;AACA,MAAMC,SAAS,GAAG,2BAAgB,aAAhB,EAA+BD,YAA/B,CAAlB;AACA,MAAME,qBAAqB,GAAGC,MAAM,CAACC,IAAP,CAAYH,SAAZ,CAA9B;AAEAI,EAAAA,MAAM,CAACH,qBAAqB,CAACI,MAAvB,CAAN,CAAqCC,IAArC,CAA0C,CAA1C;AACAF,EAAAA,MAAM,CAACH,qBAAqB,CAAC,CAAD,CAAtB,CAAN,CAAiCM,OAAjC,CAAyC,uBAAzC;AACAH,EAAAA,MAAM,CAACH,qBAAqB,CAAC,CAAD,CAAtB,CAAN,CAAiCM,OAAjC,CAAyC,uBAAzC;AAEAH,EAAAA,MAAM,0BAAQJ,SAAS,CAACC,qBAAqB,CAAC,CAAD,CAAtB,CAAjB,EAAN,CAAmDM,OAAnD,CAA2D,UAA3D;AACAH,EAAAA,MAAM,0BAAQJ,SAAS,CAACC,qBAAqB,CAAC,CAAD,CAAtB,CAAjB,EAAN,CAAmDM,OAAnD,CAA2D,UAA3D;AAEAT,EAAAA,IAAI;AACL,CAbG,CAAJ;AAeAD,IAAI,CAAC,0BAAD,EAA6B,UAAAC,IAAI,EAAI;AACvC,MAAMC,YAAY,GAAG,CAAC,aAAD,EAAgB,aAAhB,CAArB;AACA,MAAMC,SAAS,GAAG,2BAAgB,aAAhB,EAA+BD,YAA/B,CAAlB;AAEA,MAAMS,eAAe,GAAG,6BAAaR,SAAb,CAAxB;AACA,MAAMS,mBAAmB,GAAGP,MAAM,CAACC,IAAP,CAAYK,eAAZ,CAA5B;AAEAJ,EAAAA,MAAM,CAACK,mBAAmB,CAACJ,MAArB,CAAN,CAAmCC,IAAnC,CAAwC,CAAxC;AACAF,EAAAA,MAAM,CAACK,mBAAmB,CAAC,CAAD,CAApB,CAAN,CAA+BF,OAA/B,CAAuC,aAAvC;AACAH,EAAAA,MAAM,CAACK,mBAAmB,CAAC,CAAD,CAApB,CAAN,CAA+BF,OAA/B,CAAuC,aAAvC;AAEAT,EAAAA,IAAI;AACL,CAZG,CAAJ","sourcesContent":["#!/usr/bin/env node\n\n// eslint-disable-next-line\nimport createSelectors, { mapSelectors } from './selectors.js';\n\ntest('correctly creates selectors from state entities', done => {\n  const testEntities = ['propertyUno', 'propertyDos'];\n  const selectors = createSelectors('statePrefix', testEntities);\n  const selectorFunctionNames = Object.keys(selectors);\n\n  expect(selectorFunctionNames.length).toBe(2);\n  expect(selectorFunctionNames[0]).toEqual('makeSelectPropertyUno');\n  expect(selectorFunctionNames[1]).toEqual('makeSelectPropertyDos');\n\n  expect(typeof selectors[selectorFunctionNames[0]]).toEqual('function');\n  expect(typeof selectors[selectorFunctionNames[1]]).toEqual('function');\n\n  done();\n});\n\ntest('correctly maps selectors', done => {\n  const testEntities = ['propertyUno', 'propertyDos'];\n  const selectors = createSelectors('statePrefix', testEntities);\n\n  const mappedSelectors = mapSelectors(selectors);\n  const mappedSelectorNames = Object.keys(mappedSelectors);\n\n  expect(mappedSelectorNames.length).toBe(2);\n  expect(mappedSelectorNames[0]).toEqual('propertyUno');\n  expect(mappedSelectorNames[1]).toEqual('propertyDos');\n\n  done();\n});\n"],"file":"selectors.test.js"}