{"version":3,"sources":["../../../../../server/api/helpers/redux/reducers.test.js"],"names":["testInitialState","loading","error","blogId","success","blog","updating","updateError","newBlog","updateSuccess","creating","createError","createSuccess","testReducer","state","action","type","set","test","done","inferedInitialState","expect","toEqual","inferedProperties"],"mappings":"AAAA;AAEA;;;;;AACA;;AACA;;AAIA,IAAMA,gBAAgB,GAAG,uBAAO;AAC9BC,EAAAA,OAAO,EAAE,KADqB;AAE9BC,EAAAA,KAAK,EAAE,IAFuB;AAG9BC,EAAAA,MAAM,EAAE,IAHsB;AAI9BC,EAAAA,OAAO,EAAE,KAJqB;AAK9BC,EAAAA,IAAI,EAAE,IALwB;AAM9BC,EAAAA,QAAQ,EAAE,KANoB;AAO9BC,EAAAA,WAAW,EAAE,IAPiB;AAQ9BC,EAAAA,OAAO,EAAE,IARqB;AAS9BC,EAAAA,aAAa,EAAE,KATe;AAU9BC,EAAAA,QAAQ,EAAE,KAVoB;AAW9BC,EAAAA,WAAW,EAAE,IAXiB;AAY9BC,EAAAA,aAAa,EAAE;AAZe,CAAP,CAAzB;;AAeA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAsC;AAAA,MAArCC,KAAqC,uEAA7Bd,gBAA6B;AAAA,MAAXe,MAAW;;AACxD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACE,aAAOF,KAAK,CACTG,GADI,CACA,SADA,EACW,IADX,EAEJA,GAFI,CAEA,OAFA,EAES,KAFT,EAGJA,GAHI,CAGA,QAHA,EAGUF,MAAM,CAACZ,MAHjB,CAAP;;AAIF,SAAK,YAAL;AACE,aAAOW,KAAK,CACTG,GADI,CACA,SADA,EACW,KADX,EAEJA,GAFI,CAEA,SAFA,EAEW,IAFX,EAGJA,GAHI,CAGA,MAHA,EAGQF,MAAM,CAACV,IAHf,CAAP;;AAIF;AACE,aAAOS,KAAP;AAZJ;AAcD,CAfD;;AAiBAI,IAAI,CAAC,0CAAD,EAA6C,UAAAC,IAAI,EAAI;AACvD,MAAMC,mBAAmB,GAAG,+BAAgBP,WAAhB,CAA5B;AAEAQ,EAAAA,MAAM,CAACD,mBAAD,CAAN,CAA4BE,OAA5B,CAAoCtB,gBAApC;AAEAmB,EAAAA,IAAI;AACL,CANG,CAAJ;AAQAD,IAAI,CAAC,gDAAD,EAAmD,UAAAC,IAAI,EAAI;AAC7D,MAAMI,iBAAiB,GAAG,0BACxB,+BAAgBV,WAAhB,CADwB,CAA1B;AAIAQ,EAAAA,MAAM,CAACE,iBAAD,CAAN,CAA0BD,OAA1B,CAAkC,CAChC,SADgC,EAEhC,MAFgC,EAGhC,SAHgC,EAIhC,UAJgC,EAKhC,eALgC,EAMhC,OANgC,EAOhC,aAPgC,EAQhC,UARgC,EAShC,eATgC,EAUhC,SAVgC,EAWhC,QAXgC,EAYhC,aAZgC,CAAlC;AAeAH,EAAAA,IAAI;AACL,CArBG,CAAJ","sourcesContent":["#!/usr/bin/env node\n\n// eslint-disable-next-line\nimport { fromJS } from 'immutable';\nimport inferPropertiesFromInitialState, {\n  getInitialState,\n} from './reducers.js';\n\nconst testInitialState = fromJS({\n  loading: false,\n  error: null,\n  blogId: null,\n  success: false,\n  blog: null,\n  updating: false,\n  updateError: null,\n  newBlog: null,\n  updateSuccess: false,\n  creating: false,\n  createError: null,\n  createSuccess: false,\n});\n\nconst testReducer = (state = testInitialState, action) => {\n  switch (action.type) {\n    case 'CONSTANT_1':\n      return state\n        .set('loading', true)\n        .set('error', false)\n        .set('blogId', action.blogId);\n    case 'CONSTANT_2':\n      return state\n        .set('loading', false)\n        .set('success', true)\n        .set('blog', action.blog);\n    default:\n      return state;\n  }\n};\n\ntest('correctly gets intial state from reducer', done => {\n  const inferedInitialState = getInitialState(testReducer);\n\n  expect(inferedInitialState).toEqual(testInitialState);\n\n  done();\n});\n\ntest('correctly infers properties from initial state', done => {\n  const inferedProperties = inferPropertiesFromInitialState(\n    getInitialState(testReducer),\n  );\n\n  expect(inferedProperties).toEqual([\n    'newBlog',\n    'blog',\n    'success',\n    'updating',\n    'createSuccess',\n    'error',\n    'createError',\n    'creating',\n    'updateSuccess',\n    'loading',\n    'blogId',\n    'updateError',\n  ]);\n\n  done();\n});\n"],"file":"reducers.test.js"}