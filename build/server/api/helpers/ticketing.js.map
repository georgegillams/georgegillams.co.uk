{"version":3,"sources":["../../../../server/api/helpers/ticketing.js"],"names":["ticketCostMapping","EB_ONE_DAY","TICKET_COST_EB_ONE_DAY","EB_TWO_DAY","TICKET_COST_EB_TWO_DAY","R_ONE_DAY","TICKET_COST_R_ONE_DAY","R_TWO_DAY","TICKET_COST_R_TWO_DAY","ticketNamesMapping","getPriceForTicketType","ticketType","ticketCanBeReserved","t","reservedUntil","Date","getTime","ticketReservationIsValid","reserveTicket","ticket","user","priorReservation","ticketClone","JSON","parse","stringify","reservedTo","id","TICKET_RESERVATION_LENGTH","Math","max","calculateOutstandingBalance","reservedTicket","payments","ticketCost","remainingBalance","i","length","amount","validateType","beautifyTicketType"],"mappings":"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","sourcesContent":["import {\n  TICKET_COST_EB_ONE_DAY,\n  TICKET_COST_R_ONE_DAY,\n  TICKET_COST_EB_TWO_DAY,\n  TICKET_COST_R_TWO_DAY,\n  TICKET_RESERVATION_LENGTH,\n} from './constants';\n\nconst ticketCostMapping = {\n  EB_ONE_DAY: TICKET_COST_EB_ONE_DAY,\n  EB_TWO_DAY: TICKET_COST_EB_TWO_DAY,\n  R_ONE_DAY: TICKET_COST_R_ONE_DAY,\n  R_TWO_DAY: TICKET_COST_R_TWO_DAY,\n};\n\nconst ticketNamesMapping = {\n  EB_ONE_DAY: 'Saturday only early bird ticket',\n  EB_TWO_DAY: 'Full weekend early bird ticket',\n  R_ONE_DAY: 'Saturday only ticket',\n  R_TWO_DAY: 'Full weekend ticket',\n};\n\nconst getPriceForTicketType = ticketType => ticketCostMapping[ticketType] || 0;\n\nconst ticketCanBeReserved = t =>\n  !t.reservedUntil ||\n  new Date(t.reservedUntil).getTime() < new Date().getTime();\n\nconst ticketReservationIsValid = t => !!t && !ticketCanBeReserved(t);\n\nconst reserveTicket = (ticket, user, priorReservation) => {\n  const ticketClone = JSON.parse(JSON.stringify(ticket));\n  ticketClone.reservedTo = user.id;\n  ticketClone.reservedUntil =\n    new Date().getTime() + 1000 * 60 * 60 * TICKET_RESERVATION_LENGTH;\n  // If the current ticket is reserved for longer (eg if we've applied an extension) then the new ticket should have at least the same time remaining:\n  if (priorReservation && priorReservation.reservedUntil) {\n    ticketClone.reservedUntil = Math.max(\n      priorReservation.reservedUntil,\n      ticketClone.reservedUntil,\n    );\n  }\n  return ticketClone;\n};\n\nconst calculateOutstandingBalance = (reservedTicket, payments) => {\n  if (!reservedTicket) {\n    return 0;\n  }\n\n  const ticketCost = getPriceForTicketType(reservedTicket.ticketType);\n  if (!payments) {\n    return ticketCost;\n  }\n\n  let remainingBalance = ticketCost;\n  for (let i = 0; i < payments.length; i += 1) {\n    remainingBalance -= payments[i].amount;\n  }\n  remainingBalance = Math.max(0, remainingBalance);\n  return remainingBalance;\n};\n\nconst validateType = ticketType => !!ticketCostMapping[ticketType];\n\nconst beautifyTicketType = ticketType =>\n  ticketNamesMapping[ticketType] || ticketType;\n\nexport {\n  reserveTicket,\n  ticketReservationIsValid,\n  ticketCanBeReserved,\n  calculateOutstandingBalance,\n  getPriceForTicketType,\n  validateType,\n  beautifyTicketType,\n};\nexport default {\n  reserveTicket,\n  ticketReservationIsValid,\n  ticketCanBeReserved,\n  calculateOutstandingBalance,\n  getPriceForTicketType,\n  validateType,\n  beautifyTicketType,\n};\n"],"file":"ticketing.js"}